"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos SDK - gRPC Gateway docs
 * A REST interface for state queries
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceApiFp = exports.ServiceApiAxiosParamCreator = exports.ProposalsProposalStatusEnum = exports.GovV1ProposalProposalStatusEnum = exports.QueryApi = exports.QueryApiFactory = exports.QueryApiFp = exports.QueryApiAxiosParamCreator = exports.VotesByProposal200ResponseVotesInnerOptionEnum = exports.Votes200ResponseVotesInnerOptionsInnerOptionEnum = exports.Votes200ResponseVotesInnerOptionEnum = exports.VoteByProposalVoter200ResponseVoteOptionEnum = exports.TendermintTypesVoteTypeEnum = exports.TendermintTypesSignedMsgType = exports.TendermintTypesCommitSigBlockIdFlagEnum = exports.TendermintTypesBlockIDFlag = exports.StakingDelegatorValidators200ResponseValidatorsInnerStatusEnum = exports.SingleRepresentsASingleSignerModeEnum = exports.ProposalsByGroupPolicy200ResponseProposalsInnerExecutorResultEnum = exports.ProposalsByGroupPolicy200ResponseProposalsInnerStatusEnum = exports.Proposals200ResponseProposalsInnerStatusEnum = exports.GroupProposal200ResponseProposalExecutorResultEnum = exports.GroupProposal200ResponseProposalStatusEnum = exports.GovV1Votes200ResponseVotesInnerOptionsInnerOptionEnum = exports.GovV1Proposal200ResponseProposalsInnerStatusEnum = exports.DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesInnerBlockIdFlagEnum = exports.DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerDuplicateVoteEvidenceVoteATypeEnum = exports.CosmosTxV1beta1OrderBy = exports.CosmosTxV1beta1ModeInfoSingleModeEnum = exports.CosmosTxV1beta1BroadcastTxRequestModeEnum = exports.CosmosTxV1beta1BroadcastMode = exports.CosmosTxSigningV1beta1SignMode = exports.CosmosStakingV1beta1ValidatorStatusEnum = exports.CosmosStakingV1beta1BondStatus = exports.CosmosGroupV1VoteOption = exports.CosmosGroupV1VoteOptionEnum = exports.CosmosGroupV1ProposalStatus = exports.CosmosGroupV1ProposalExecutorResult = exports.CosmosGroupV1ProposalExecutorResultEnum = exports.CosmosGroupV1ProposalStatusEnum = exports.CosmosGovV1beta1WeightedVoteOptionOptionEnum = exports.CosmosGovV1beta1VoteOption = exports.CosmosGovV1beta1VoteOptionEnum = exports.CosmosGovV1beta1ProposalStatus = exports.CosmosGovV1beta1ProposalStatusEnum = exports.CosmosGovV1WeightedVoteOptionOptionEnum = exports.CosmosGovV1VoteOption = exports.CosmosGovV1ProposalStatus = exports.CosmosGovV1ProposalStatusEnum = exports.BroadcastTxRequestModeEnum = void 0;
exports.GetTxsEventOrderByEnum = exports.ServiceApi = exports.ServiceApiFactory = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.CosmosGovV1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.CosmosGovV1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.CosmosGovV1beta1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1beta1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
exports.CosmosGovV1beta1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1beta1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.CosmosGovV1beta1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.CosmosGroupV1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
exports.CosmosGroupV1ProposalExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
/**
 * ProposalExecutorResult defines types of proposal executor results.   - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.  - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.  - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.  - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn\'t update state.
 * @export
 * @enum {string}
 */
exports.CosmosGroupV1ProposalExecutorResult = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
/**
 * ProposalStatus defines proposal statuses.   - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.  - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.  - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome passes the group policy\'s decision policy.  - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome is rejected by the group policy\'s decision policy.  - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the final tally.  - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 * @export
 * @enum {string}
 */
exports.CosmosGroupV1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
exports.CosmosGroupV1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * VoteOption enumerates the valid vote options for a given proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will return an error.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
exports.CosmosGroupV1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
 * @export
 * @enum {string}
 */
exports.CosmosStakingV1beta1BondStatus = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
exports.CosmosStakingV1beta1ValidatorStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
/**
 * SignMode represents a signing mode with its own security guarantees.  This enum should be considered a registry of all known sign modes in the Cosmos ecosystem. Apps are not expected to support all known sign modes. Apps that would like to support custom  sign modes are encouraged to open a small PR against this file to add a new case to this SignMode enum describing their sign mode so that different apps have a consistent version of this enum.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected.  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. It is currently not supported.  - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers\' `signer_info`. It also allows for adding Tips in transactions.  Since: cosmos-sdk 0.46  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future.  - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191  Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future.  Since: cosmos-sdk 0.45.2
 * @export
 * @enum {string}
 */
exports.CosmosTxSigningV1beta1SignMode = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead, BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
 * @export
 * @enum {string}
 */
exports.CosmosTxV1beta1BroadcastMode = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.CosmosTxV1beta1BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.CosmosTxV1beta1ModeInfoSingleModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
/**
 * - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
 * @export
 * @enum {string}
 */
exports.CosmosTxV1beta1OrderBy = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
};
exports.DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerDuplicateVoteEvidenceVoteATypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
exports.DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesInnerBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
exports.GovV1Proposal200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
exports.GovV1Votes200ResponseVotesInnerOptionsInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.GroupProposal200ResponseProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
exports.GroupProposal200ResponseProposalExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
exports.Proposals200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
exports.ProposalsByGroupPolicy200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
exports.ProposalsByGroupPolicy200ResponseProposalsInnerExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
exports.SingleRepresentsASingleSignerModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
exports.StakingDelegatorValidators200ResponseValidatorsInnerStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.TendermintTypesBlockIDFlag = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
exports.TendermintTypesCommitSigBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
/**
 * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
 * @export
 * @enum {string}
 */
exports.TendermintTypesSignedMsgType = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
exports.TendermintTypesVoteTypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
exports.VoteByProposalVoter200ResponseVoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.Votes200ResponseVotesInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.Votes200ResponseVotesInnerOptionsInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.VotesByProposal200ResponseVotesInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * QueryApi - axios parameter creator
 * @export
 */
var QueryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _class: function (classId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'classId' is not null or undefined
                    (0, common_1.assertParamExists)('_class', 'classId', classId);
                    localVarPath = "/cosmos/nft/v1beta1/classes/{class_id}"
                        .replace("{" + "class_id" + "}", encodeURIComponent(String(classId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('account', 'address', address);
                    localVarPath = "/cosmos/auth/v1beta1/accounts/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAddressByID: function (id, accountId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('accountAddressByID', 'id', id);
                    localVarPath = "/cosmos/auth/v1beta1/address_by_id/{id}"
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountId !== undefined) {
                        localVarQueryParameter['account_id'] = accountId;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfo: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('accountInfo', 'address', address);
                    localVarPath = "/cosmos/auth/v1beta1/account_info/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/accounts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressBytesToString: function (addressBytes, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'addressBytes' is not null or undefined
                    (0, common_1.assertParamExists)('addressBytesToString', 'addressBytes', addressBytes);
                    localVarPath = "/cosmos/auth/v1beta1/bech32/{address_bytes}"
                        .replace("{" + "address_bytes" + "}", encodeURIComponent(String(addressBytes)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressStringToBytes: function (addressString, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'addressString' is not null or undefined
                    (0, common_1.assertParamExists)('addressStringToBytes', 'addressString', addressString);
                    localVarPath = "/cosmos/auth/v1beta1/bech32/{address_string}"
                        .replace("{" + "address_string" + "}", encodeURIComponent(String(addressString)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('allBalances', 'address', address);
                    localVarPath = "/cosmos/bank/v1beta1/balances/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/evidence/v1beta1/evidence";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'granter' is not null or undefined
                    (0, common_1.assertParamExists)('allowance', 'granter', granter);
                    // verify required parameter 'grantee' is not null or undefined
                    (0, common_1.assertParamExists)('allowance', 'grantee', grantee);
                    localVarPath = "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}"
                        .replace("{" + "granter" + "}", encodeURIComponent(String(granter)))
                        .replace("{" + "grantee" + "}", encodeURIComponent(String(grantee)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'grantee' is not null or undefined
                    (0, common_1.assertParamExists)('allowances', 'grantee', grantee);
                    localVarPath = "/cosmos/feegrant/v1beta1/allowances/{grantee}"
                        .replace("{" + "grantee" + "}", encodeURIComponent(String(grantee)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowancesByGranter: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'granter' is not null or undefined
                    (0, common_1.assertParamExists)('allowancesByGranter', 'granter', granter);
                    localVarPath = "/cosmos/feegrant/v1beta1/issued/{granter}"
                        .replace("{" + "granter" + "}", encodeURIComponent(String(granter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/annual_provisions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('appliedPlan', 'name', name);
                    localVarPath = "/cosmos/upgrade/v1beta1/applied_plan/{name}"
                        .replace("{" + "name" + "}", encodeURIComponent(String(name)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authority: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/upgrade/v1beta1/authority";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('balance', 'address', address);
                    localVarPath = "/cosmos/bank/v1beta1/balances/{address}/by_denom"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (denom !== undefined) {
                        localVarQueryParameter['denom'] = denom;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bech32Prefix: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/bech32";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classes: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/nft/v1beta1/classes";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/distribution/v1beta1/community_pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/upgrade/v1beta1/current_plan";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegation', 'validatorAddr', validatorAddr);
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegation', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}"
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)))
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationRewards', 'delegatorAddress', delegatorAddress);
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationRewards', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}"
                        .replace("{" + "delegator_address" + "}", encodeURIComponent(String(delegatorAddress)))
                        .replace("{" + "validator_address" + "}", encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationTotalRewards', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards"
                        .replace("{" + "delegator_address" + "}", encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorDelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegations/{delegator_addr}"
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorUnbondingDelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations"
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidator', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidator', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}"
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)))
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidators', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators"
                        .replace("{" + "delegator_address" + "}", encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorWithdrawAddress', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address"
                        .replace("{" + "delegator_address" + "}", encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('denomMetadata', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/denoms_metadata/{denom}"
                        .replace("{" + "denom" + "}", encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('denomOwners', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/denom_owners/{denom}"
                        .replace("{" + "denom" + "}", encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/denoms_metadata";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('deposit', 'proposalId', proposalId);
                    // verify required parameter 'depositor' is not null or undefined
                    (0, common_1.assertParamExists)('deposit', 'depositor', depositor);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)))
                        .replace("{" + "depositor" + "}", encodeURIComponent(String(depositor)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('deposits', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/distribution/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (hash, evidenceHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'hash' is not null or undefined
                    (0, common_1.assertParamExists)('evidence', 'hash', hash);
                    localVarPath = "/cosmos/evidence/v1beta1/evidence/{hash}"
                        .replace("{" + "hash" + "}", encodeURIComponent(String(hash)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (evidenceHash !== undefined) {
                        localVarQueryParameter['evidence_hash'] = evidenceHash;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paramsType' is not null or undefined
                    (0, common_1.assertParamExists)('govParams', 'paramsType', paramsType);
                    localVarPath = "/cosmos/gov/v1beta1/params/{params_type}"
                        .replace("{" + "params_type" + "}", encodeURIComponent(String(paramsType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Deposit', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}/deposits"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit_1: function (proposalId, depositor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Deposit_1', 'proposalId', proposalId);
                    // verify required parameter 'depositor' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Deposit_1', 'depositor', depositor);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)))
                        .replace("{" + "depositor" + "}", encodeURIComponent(String(depositor)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Params: function (paramsType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paramsType' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Params', 'paramsType', paramsType);
                    localVarPath = "/cosmos/gov/v1/params/{params_type}"
                        .replace("{" + "params_type" + "}", encodeURIComponent(String(paramsType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/gov/v1/proposals";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (proposalStatus !== undefined) {
                        localVarQueryParameter['proposal_status'] = proposalStatus;
                    }
                    if (voter !== undefined) {
                        localVarQueryParameter['voter'] = voter;
                    }
                    if (depositor !== undefined) {
                        localVarQueryParameter['depositor'] = depositor;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal_2: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Proposal_2', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1TallyResult: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1TallyResult', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}/tally"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Vote: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Vote', 'proposalId', proposalId);
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Vote', 'voter', voter);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)))
                        .replace("{" + "voter" + "}", encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govV1Votes', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1/proposals/{proposal_id}/votes"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granteeGrants: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'grantee' is not null or undefined
                    (0, common_1.assertParamExists)('granteeGrants', 'grantee', grantee);
                    localVarPath = "/cosmos/authz/v1beta1/grants/grantee/{grantee}"
                        .replace("{" + "grantee" + "}", encodeURIComponent(String(grantee)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granterGrants: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'granter' is not null or undefined
                    (0, common_1.assertParamExists)('granterGrants', 'granter', granter);
                    localVarPath = "/cosmos/authz/v1beta1/grants/granter/{granter}"
                        .replace("{" + "granter" + "}", encodeURIComponent(String(granter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/authz/v1beta1/grants";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (granter !== undefined) {
                        localVarQueryParameter['granter'] = granter;
                    }
                    if (grantee !== undefined) {
                        localVarQueryParameter['grantee'] = grantee;
                    }
                    if (msgTypeUrl !== undefined) {
                        localVarQueryParameter['msg_type_url'] = msgTypeUrl;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInfo: function (groupId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('groupInfo', 'groupId', groupId);
                    localVarPath = "/cosmos/group/v1/group_info/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembers: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('groupMembers', 'groupId', groupId);
                    localVarPath = "/cosmos/group/v1/group_members/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'admin' is not null or undefined
                    (0, common_1.assertParamExists)('groupPoliciesByAdmin', 'admin', admin);
                    localVarPath = "/cosmos/group/v1/group_policies_by_admin/{admin}"
                        .replace("{" + "admin" + "}", encodeURIComponent(String(admin)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByGroup: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'groupId' is not null or undefined
                    (0, common_1.assertParamExists)('groupPoliciesByGroup', 'groupId', groupId);
                    localVarPath = "/cosmos/group/v1/group_policies_by_group/{group_id}"
                        .replace("{" + "group_id" + "}", encodeURIComponent(String(groupId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPolicyInfo: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('groupPolicyInfo', 'address', address);
                    localVarPath = "/cosmos/group/v1/group_policy_info/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupProposal: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('groupProposal', 'proposalId', proposalId);
                    localVarPath = "/cosmos/group/v1/proposal/{proposal_id}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupTallyResult: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('groupTallyResult', 'proposalId', proposalId);
                    localVarPath = "/cosmos/group/v1/proposals/{proposal_id}/tally"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'admin' is not null or undefined
                    (0, common_1.assertParamExists)('groupsByAdmin', 'admin', admin);
                    localVarPath = "/cosmos/group/v1/groups_by_admin/{admin}"
                        .replace("{" + "admin" + "}", encodeURIComponent(String(admin)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByMember: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('groupsByMember', 'address', address);
                    localVarPath = "/cosmos/group/v1/groups_by_member/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('historicalInfo', 'height', height);
                    localVarPath = "/cosmos/staking/v1beta1/historical_info/{height}"
                        .replace("{" + "height" + "}", encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/inflation";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccountByName: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('moduleAccountByName', 'name', name);
                    localVarPath = "/cosmos/auth/v1beta1/module_accounts/{name}"
                        .replace("{" + "name" + "}", encodeURIComponent(String(name)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccounts: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/module_accounts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/upgrade/v1beta1/module_versions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (moduleName !== undefined) {
                        localVarQueryParameter['module_name'] = moduleName;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFT: function (classId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'classId' is not null or undefined
                    (0, common_1.assertParamExists)('nFT', 'classId', classId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('nFT', 'id', id);
                    localVarPath = "/cosmos/nft/v1beta1/nfts/{class_id}/{id}"
                        .replace("{" + "class_id" + "}", encodeURIComponent(String(classId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFTs: function (classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/nft/v1beta1/nfts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (classId !== undefined) {
                        localVarQueryParameter['class_id'] = classId;
                    }
                    if (owner !== undefined) {
                        localVarQueryParameter['owner'] = owner;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftBalance: function (owner, classId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'owner' is not null or undefined
                    (0, common_1.assertParamExists)('nftBalance', 'owner', owner);
                    // verify required parameter 'classId' is not null or undefined
                    (0, common_1.assertParamExists)('nftBalance', 'classId', classId);
                    localVarPath = "/cosmos/nft/v1beta1/balance/{owner}/{class_id}"
                        .replace("{" + "owner" + "}", encodeURIComponent(String(owner)))
                        .replace("{" + "class_id" + "}", encodeURIComponent(String(classId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        owner: function (classId, id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'classId' is not null or undefined
                    (0, common_1.assertParamExists)('owner', 'classId', classId);
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('owner', 'id', id);
                    localVarPath = "/cosmos/nft/v1beta1/owner/{class_id}/{id}"
                        .replace("{" + "class_id" + "}", encodeURIComponent(String(classId)))
                        .replace("{" + "id" + "}", encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/params/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (subspace !== undefined) {
                        localVarQueryParameter['subspace'] = subspace;
                    }
                    if (key !== undefined) {
                        localVarQueryParameter['key'] = key;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('proposal', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/gov/v1beta1/proposals";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (proposalStatus !== undefined) {
                        localVarQueryParameter['proposal_status'] = proposalStatus;
                    }
                    if (voter !== undefined) {
                        localVarQueryParameter['voter'] = voter;
                    }
                    if (depositor !== undefined) {
                        localVarQueryParameter['depositor'] = depositor;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsByGroupPolicy: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('proposalsByGroupPolicy', 'address', address);
                    localVarPath = "/cosmos/group/v1/proposals_by_group_policy/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('redelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations"
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (srcValidatorAddr !== undefined) {
                        localVarQueryParameter['src_validator_addr'] = srcValidatorAddr;
                    }
                    if (dstValidatorAddr !== undefined) {
                        localVarQueryParameter['dst_validator_addr'] = dstValidatorAddr;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEnabled: function (denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/send_enabled";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (denoms) {
                        localVarQueryParameter['denoms'] = denoms;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'consAddress' is not null or undefined
                    (0, common_1.assertParamExists)('signingInfo', 'consAddress', consAddress);
                    localVarPath = "/cosmos/slashing/v1beta1/signing_infos/{cons_address}"
                        .replace("{" + "cons_address" + "}", encodeURIComponent(String(consAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/slashing/v1beta1/signing_infos";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/slashing/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalanceByDenom: function (address, denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('spendableBalanceByDenom', 'address', address);
                    localVarPath = "/cosmos/bank/v1beta1/spendable_balances/{address}/by_denom"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (denom !== undefined) {
                        localVarQueryParameter['denom'] = denom;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('spendableBalances', 'address', address);
                    localVarPath = "/cosmos/bank/v1beta1/spendable_balances/{address}"
                        .replace("{" + "address" + "}", encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorValidators', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators"
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subspaces: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/params/v1beta1/subspaces";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supply: function (classId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'classId' is not null or undefined
                    (0, common_1.assertParamExists)('supply', 'classId', classId);
                    localVarPath = "/cosmos/nft/v1beta1/supply/{class_id}"
                        .replace("{" + "class_id" + "}", encodeURIComponent(String(classId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/supply/by_denom";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (denom !== undefined) {
                        localVarQueryParameter['denom'] = denom;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('tallyResult', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/supply";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('unbondingDelegation', 'validatorAddr', validatorAddr);
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('unbondingDelegation', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation"
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)))
                        .replace("{" + "delegator_addr" + "}", encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lastHeight' is not null or undefined
                    (0, common_1.assertParamExists)('upgradedConsensusState', 'lastHeight', lastHeight);
                    localVarPath = "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}"
                        .replace("{" + "last_height" + "}", encodeURIComponent(String(lastHeight)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validator', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}"
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorCommission', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/commission"
                        .replace("{" + "validator_address" + "}", encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validatorDelegations', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations"
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDistributionInfo: function (validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorDistributionInfo', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}"
                        .replace("{" + "validator_address" + "}", encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorOutstandingRewards', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards"
                        .replace("{" + "validator_address" + "}", encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorSlashes', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes"
                        .replace("{" + "validator_address" + "}", encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (startingHeight !== undefined) {
                        localVarQueryParameter['starting_height'] = startingHeight;
                    }
                    if (endingHeight !== undefined) {
                        localVarQueryParameter['ending_height'] = endingHeight;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validatorUnbondingDelegations', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations"
                        .replace("{" + "validator_addr" + "}", encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/validators";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('vote', 'proposalId', proposalId);
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('vote', 'voter', voter);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)))
                        .replace("{" + "voter" + "}", encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteByProposalVoter: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('voteByProposalVoter', 'proposalId', proposalId);
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('voteByProposalVoter', 'voter', voter);
                    localVarPath = "/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)))
                        .replace("{" + "voter" + "}", encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('votes', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByProposal: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('votesByProposal', 'proposalId', proposalId);
                    localVarPath = "/cosmos/group/v1/votes_by_proposal/{proposal_id}"
                        .replace("{" + "proposal_id" + "}", encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByVoter: function (voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('votesByVoter', 'voter', voter);
                    localVarPath = "/cosmos/group/v1/votes_by_voter/{voter}"
                        .replace("{" + "voter" + "}", encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.QueryApiAxiosParamCreator = QueryApiAxiosParamCreator;
/**
 * QueryApi - functional programming interface
 * @export
 */
var QueryApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QueryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _class: function (classId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator._class(classId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.account(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAddressByID: function (id, accountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountAddressByID(id, accountId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfo: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accountInfo(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressBytesToString: function (addressBytes, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressBytesToString(addressBytes, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressStringToBytes: function (addressString, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressStringToBytes(addressString, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allowance(granter, grantee, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowancesByGranter: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.annualProvisions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appliedPlan(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authority: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authority(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.balance(address, denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bech32Prefix: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bech32Prefix(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classes: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.communityPool(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.currentPlan(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegation(validatorAddr, delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegationRewards(delegatorAddress, validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegationTotalRewards(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorValidator(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorValidators(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorWithdrawAddress(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomMetadata(denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deposit(proposalId, depositor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (hash, evidenceHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.evidence(hash, evidenceHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govParams(paramsType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit_1: function (proposalId, depositor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Deposit_1(proposalId, depositor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Params: function (paramsType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Params(paramsType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal_2: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Proposal_2(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1TallyResult: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1TallyResult(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Vote: function (proposalId, voter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Vote(proposalId, voter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granteeGrants: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granterGrants: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInfo: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupInfo(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembers: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByGroup: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPolicyInfo: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupPolicyInfo(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupProposal: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupProposal(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupTallyResult: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupTallyResult(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByMember: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.historicalInfo(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.inflation(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccountByName: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.moduleAccountByName(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccounts: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.moduleAccounts(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.moduleVersions(moduleName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFT: function (classId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.nFT(classId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFTs: function (classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftBalance: function (owner, classId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.nftBalance(owner, classId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        owner: function (classId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.owner(classId, id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.params(subspace, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pool(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.proposal(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsByGroupPolicy: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEnabled: function (denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.signingInfo(consAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.slashingParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalanceByDenom: function (address, denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.spendableBalanceByDenom(address, denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subspaces: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subspaces(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supply: function (classId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.supply(classId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.supplyOf(denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.tallyResult(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unbondingDelegation(validatorAddr, delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.upgradedConsensusState(lastHeight, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validator(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorCommission(validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDistributionInfo: function (validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorDistributionInfo(validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorOutstandingRewards(validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.vote(proposalId, voter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteByProposalVoter: function (proposalId, voter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.voteByProposalVoter(proposalId, voter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByProposal: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByVoter: function (voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.QueryApiFp = QueryApiFp;
/**
 * QueryApi - factory interface
 * @export
 */
var QueryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QueryApiFp)(configuration);
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _class: function (classId, options) {
            return localVarFp._class(classId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            return localVarFp.account(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAddressByID: function (id, accountId, options) {
            return localVarFp.accountAddressByID(id, accountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfo: function (address, options) {
            return localVarFp.accountInfo(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressBytesToString: function (addressBytes, options) {
            return localVarFp.addressBytesToString(addressBytes, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressStringToBytes: function (addressString, options) {
            return localVarFp.addressStringToBytes(addressString, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            return localVarFp.allowance(granter, grantee, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowancesByGranter: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            return localVarFp.annualProvisions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            return localVarFp.appliedPlan(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            return localVarFp.authParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authority: function (options) {
            return localVarFp.authority(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            return localVarFp.balance(address, denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            return localVarFp.bankParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bech32Prefix: function (options) {
            return localVarFp.bech32Prefix(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classes: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            return localVarFp.communityPool(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            return localVarFp.currentPlan(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            return localVarFp.delegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            return localVarFp.delegationRewards(delegatorAddress, validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            return localVarFp.delegationTotalRewards(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.delegatorValidator(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            return localVarFp.delegatorValidators(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            return localVarFp.delegatorWithdrawAddress(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            return localVarFp.denomMetadata(denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            return localVarFp.deposit(proposalId, depositor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            return localVarFp.distributionParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (hash, evidenceHash, options) {
            return localVarFp.evidence(hash, evidenceHash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            return localVarFp.govParams(paramsType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit_1: function (proposalId, depositor, options) {
            return localVarFp.govV1Deposit_1(proposalId, depositor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Params: function (paramsType, options) {
            return localVarFp.govV1Params(paramsType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal_2: function (proposalId, options) {
            return localVarFp.govV1Proposal_2(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1TallyResult: function (proposalId, options) {
            return localVarFp.govV1TallyResult(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Vote: function (proposalId, voter, options) {
            return localVarFp.govV1Vote(proposalId, voter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granteeGrants: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granterGrants: function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInfo: function (groupId, options) {
            return localVarFp.groupInfo(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembers: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByGroup: function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPolicyInfo: function (address, options) {
            return localVarFp.groupPolicyInfo(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupProposal: function (proposalId, options) {
            return localVarFp.groupProposal(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupTallyResult: function (proposalId, options) {
            return localVarFp.groupTallyResult(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByAdmin: function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByMember: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            return localVarFp.historicalInfo(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            return localVarFp.inflation(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            return localVarFp.mintParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccountByName: function (name, options) {
            return localVarFp.moduleAccountByName(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccounts: function (options) {
            return localVarFp.moduleAccounts(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            return localVarFp.moduleVersions(moduleName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFT: function (classId, id, options) {
            return localVarFp.nFT(classId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFTs: function (classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftBalance: function (owner, classId, options) {
            return localVarFp.nftBalance(owner, classId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        owner: function (classId, id, options) {
            return localVarFp.owner(classId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            return localVarFp.params(subspace, key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            return localVarFp.pool(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            return localVarFp.proposal(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsByGroupPolicy: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEnabled: function (denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            return localVarFp.signingInfo(consAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            return localVarFp.slashingParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalanceByDenom: function (address, denom, options) {
            return localVarFp.spendableBalanceByDenom(address, denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            return localVarFp.stakingParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subspaces: function (options) {
            return localVarFp.subspaces(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supply: function (classId, options) {
            return localVarFp.supply(classId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            return localVarFp.supplyOf(denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            return localVarFp.tallyResult(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            return localVarFp.unbondingDelegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            return localVarFp.upgradedConsensusState(lastHeight, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            return localVarFp.validator(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            return localVarFp.validatorCommission(validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDistributionInfo: function (validatorAddress, options) {
            return localVarFp.validatorDistributionInfo(validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            return localVarFp.validatorOutstandingRewards(validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            return localVarFp.vote(proposalId, voter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteByProposalVoter: function (proposalId, voter, options) {
            return localVarFp.voteByProposalVoter(proposalId, voter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByProposal: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByVoter: function (voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QueryApiFactory = QueryApiFactory;
/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
var QueryApi = /** @class */ (function (_super) {
    __extends(QueryApi, _super);
    function QueryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Class queries an NFT class based on its id
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype._class = function (classId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration)._class(classId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.account = function (address, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).account(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46.2
     * @summary AccountAddressByID returns account address based on account number.
     * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
     * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.accountAddressByID = function (id, accountId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).accountAddressByID(id, accountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.47
     * @summary AccountInfo queries account info which is common to all account types.
     * @param {string} address address is the account address string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.accountInfo = function (address, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).accountInfo(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
     * @summary Accounts returns all the existing accounts.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.accounts = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary AddressBytesToString converts Account Address bytes to string
     * @param {string} addressBytes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.addressBytesToString = function (addressBytes, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).addressBytesToString(addressBytes, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary AddressStringToBytes converts Address string to bytes
     * @param {string} addressString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.addressStringToBytes = function (addressString, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).addressStringToBytes(addressString, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allBalances = function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allEvidence = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Allowance returns fee granted to the grantee by the granter.
     * @param {string} granter granter is the address of the user granting an allowance of their funds.
     * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allowance = function (granter, grantee, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allowance(granter, grantee, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Allowances returns all the grants for address.
     * @param {string} grantee
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allowances = function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary AllowancesByGranter returns all the grants given by an address
     * @param {string} granter
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allowancesByGranter = function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.annualProvisions = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).annualProvisions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.appliedPlan = function (name, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).appliedPlan(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.authParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).authParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary Returns the account with authority to conduct upgrades
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.authority = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).authority(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.balance = function (address, denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).balance(address, denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.bankParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).bankParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary Bech32Prefix queries bech32Prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.bech32Prefix = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).bech32Prefix(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Classes queries all NFT classes
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.classes = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.communityPool = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).communityPool(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.currentPlan = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).currentPlan(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegation = function (validatorAddr, delegatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegationRewards = function (delegatorAddress, validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegationRewards(delegatorAddress, validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegationTotalRewards = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegationTotalRewards(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorDelegations = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorUnbondingDelegations = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorValidator = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorValidator(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorValidators = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorValidators(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorWithdrawAddress = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorWithdrawAddress(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DenomsMetadata queries the client metadata of a given coin denomination.
     * @param {string} denom denom is the coin denom to query the metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomMetadata = function (denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomMetadata(denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
     * @summary DenomOwners queries for all account addresses that own a particular token denomination.
     * @param {string} denom denom defines the coin denomination to query all account holders for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomOwners = function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomsMetadata = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.deposit = function (proposalId, depositor, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).deposit(proposalId, depositor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.deposits = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.distributionParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).distributionParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
     * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.evidence = function (hash, evidenceHash, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).evidence(hash, evidenceHash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govParams = function (paramsType, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govParams(paramsType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Deposit = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Deposit_1 = function (proposalId, depositor, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Deposit_1(proposalId, depositor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Params = function (paramsType, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Params(paramsType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Proposal = function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Proposal_2 = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Proposal_2(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1TallyResult = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1TallyResult(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the voter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Vote = function (proposalId, voter, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Vote(proposalId, voter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govV1Votes = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
     * @param {string} grantee
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.granteeGrants = function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
     * @param {string} granter
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.granterGrants = function (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns list of `Authorization`, granted to the grantee by the granter.
     * @param {string} [granter]
     * @param {string} [grantee]
     * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.grants = function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupInfo queries group info based on group id.
     * @param {string} groupId group_id is the unique ID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupInfo = function (groupId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupInfo(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupMembers queries members of a group by group id.
     * @param {string} groupId group_id is the unique ID of the group.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupMembers = function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupPoliciesByAdmin queries group policies by admin address.
     * @param {string} admin admin is the admin address of the group policy.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupPoliciesByAdmin = function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupPoliciesByGroup queries group policies by group id.
     * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupPoliciesByGroup = function (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
     * @param {string} address address is the account address of the group policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupPolicyInfo = function (address, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupPolicyInfo(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposal queries a proposal based on proposal id.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupProposal = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupProposal(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
     * @param {string} proposalId proposal_id is the unique id of a proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupTallyResult = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupTallyResult(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupsByAdmin queries groups by admin address.
     * @param {string} admin admin is the account address of a group\&#39;s admin.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupsByAdmin = function (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GroupsByMember queries groups by member address.
     * @param {string} address address is the group member address.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.groupsByMember = function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.historicalInfo = function (height, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).historicalInfo(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.inflation = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).inflation(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.mintParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).mintParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ModuleAccountByName returns the module account info by module name
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.moduleAccountByName = function (name, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).moduleAccountByName(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary ModuleAccounts returns all the existing module accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.moduleAccounts = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).moduleAccounts(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.43
     * @summary ModuleVersions queries the list of module versions from state.
     * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.moduleVersions = function (moduleName, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).moduleVersions(moduleName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary NFT queries an NFT based on its class and id.
     * @param {string} classId class_id associated with the nft
     * @param {string} id id is a unique identifier of the NFT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.nFT = function (classId, id, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).nFT(classId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
     * @param {string} [classId] class_id associated with the nft.
     * @param {string} [owner] owner is the owner address of the nft.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.nFTs = function (classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
     * @param {string} owner owner is the owner address of the nft
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.nftBalance = function (owner, classId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).nftBalance(owner, classId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
     * @param {string} classId class_id associated with the nft
     * @param {string} id id is a unique identifier of the NFT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.owner = function (classId, id, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).owner(classId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.params = function (subspace, key, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).params(subspace, key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.pool = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).pool(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.proposal = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).proposal(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.proposals = function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
     * @param {string} address address is the account address of the group policy related to proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.proposalsByGroupPolicy = function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.redelegations = function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
     * @summary SendEnabled queries for SendEnabled entries.
     * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.sendEnabled = function (denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.signingInfo = function (consAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).signingInfo(consAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.signingInfos = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.slashingParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).slashingParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
     * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.spendableBalanceByDenom = function (address, denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).spendableBalanceByDenom(address, denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
     * @summary SpendableBalances queries the spendable balance of all coins for a single account.
     * @param {string} address address is the address to query spendable balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.spendableBalances = function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.stakingDelegatorValidators = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.stakingParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).stakingParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.46
     * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.subspaces = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).subspaces(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.supply = function (classId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).supply(classId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.supplyOf = function (denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).supplyOf(denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.tallyResult = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).tallyResult(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary TotalSupply queries the total supply of all coins.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.totalSupply = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.unbondingDelegation = function (validatorAddr, delegatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).unbondingDelegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.upgradedConsensusState = function (lastHeight, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).upgradedConsensusState(lastHeight, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validator = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validator(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorCommission = function (validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorCommission(validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorDelegations = function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorDistributionInfo = function (validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorDistributionInfo(validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorOutstandingRewards = function (validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorOutstandingRewards(validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorSlashes = function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorUnbondingDelegations = function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validators = function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the voter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.vote = function (proposalId, voter, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).vote(proposalId, voter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary VoteByProposalVoter queries a vote by proposal id and voter.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {string} voter voter is a proposal voter account address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.voteByProposalVoter = function (proposalId, voter, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).voteByProposalVoter(proposalId, voter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.votes = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary VotesByProposal queries a vote by proposal id.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.votesByProposal = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary VotesByVoter queries a vote by voter.
     * @param {string} voter voter is a proposal voter account address.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.votesByVoter = function (voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QueryApi;
}(base_1.BaseAPI));
exports.QueryApi = QueryApi;
/**
 * @export
 */
exports.GovV1ProposalProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * @export
 */
exports.ProposalsProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ServiceApi - axios parameter creator
 * @export
 */
var ServiceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aBCIQuery: function (data, path, height, prove, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/abci_query";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (data !== undefined) {
                        localVarQueryParameter['data'] = data;
                    }
                    if (path !== undefined) {
                        localVarQueryParameter['path'] = path;
                    }
                    if (height !== undefined) {
                        localVarQueryParameter['height'] = height;
                    }
                    if (prove !== undefined) {
                        localVarQueryParameter['prove'] = prove;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('broadcastTx', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('getBlockByHeight', 'height', height);
                    localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/{height}"
                        .replace("{" + "height" + "}", encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockWithTxs: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('getBlockWithTxs', 'height', height);
                    localVarPath = "/cosmos/tx/v1beta1/txs/block/{height}"
                        .replace("{" + "height" + "}", encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/node_info";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/syncing";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'hash' is not null or undefined
                    (0, common_1.assertParamExists)('getTx', 'hash', hash);
                    localVarPath = "/cosmos/tx/v1beta1/txs/{hash}"
                        .replace("{" + "hash" + "}", encodeURIComponent(String(hash)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/tx/v1beta1/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (events) {
                        localVarQueryParameter['events'] = events;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    if (orderBy !== undefined) {
                        localVarQueryParameter['order_by'] = orderBy;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('getValidatorSetByHeight', 'height', height);
                    localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/{height}"
                        .replace("{" + "height" + "}", encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('simulate', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/simulate";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecode: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('txDecode', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/decode";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecodeAmino: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('txDecodeAmino', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/decode/amino";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncode: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('txEncode', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/encode";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncodeAmino: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('txEncodeAmino', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/encode/amino";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ServiceApiAxiosParamCreator = ServiceApiAxiosParamCreator;
/**
 * ServiceApi - functional programming interface
 * @export
 */
var ServiceApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServiceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aBCIQuery: function (data, path, height, prove, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aBCIQuery(data, path, height, prove, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.broadcastTx(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBlockByHeight(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockWithTxs: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestBlock(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNodeInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSyncing(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTx(hash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.simulate(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecode: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txDecode(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecodeAmino: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txDecodeAmino(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncode: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txEncode(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncodeAmino: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txEncodeAmino(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ServiceApiFp = ServiceApiFp;
/**
 * ServiceApi - factory interface
 * @export
 */
var ServiceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServiceApiFp)(configuration);
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aBCIQuery: function (data, path, height, prove, options) {
            return localVarFp.aBCIQuery(data, path, height, prove, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            return localVarFp.broadcastTx(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            return localVarFp.getBlockByHeight(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockWithTxs: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            return localVarFp.getLatestBlock(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            return localVarFp.getNodeInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            return localVarFp.getSyncing(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            return localVarFp.getTx(hash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
            return localVarFp.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            return localVarFp.simulate(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecode: function (body, options) {
            return localVarFp.txDecode(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecodeAmino: function (body, options) {
            return localVarFp.txDecodeAmino(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncode: function (body, options) {
            return localVarFp.txEncode(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncodeAmino: function (body, options) {
            return localVarFp.txEncodeAmino(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServiceApiFactory = ServiceApiFactory;
/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
var ServiceApi = /** @class */ (function (_super) {
    __extends(ServiceApi, _super);
    function ServiceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
     * @param {string} [data]
     * @param {string} [path]
     * @param {string} [height]
     * @param {boolean} [prove]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.aBCIQuery = function (data, path, height, prove, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).aBCIQuery(data, path, height, prove, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {BroadcastTxRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.broadcastTx = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).broadcastTx(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getBlockByHeight = function (height, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getBlockByHeight(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.45.2
     * @summary GetBlockWithTxs fetches a block with decoded txs.
     * @param {string} height height is the height of the block to query.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getBlockWithTxs = function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getLatestBlock = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getLatestBlock(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getLatestValidatorSet = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getNodeInfo = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getNodeInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getSyncing = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getSyncing(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getTx = function (hash, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getTx(hash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
     * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
     * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getTxsEvent = function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getValidatorSetByHeight = function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.simulate = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).simulate(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxDecode decodes the transaction.
     * @param {TxDecodeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.txDecode = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).txDecode(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
     * @param {TxDecodeAminoRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.txDecodeAmino = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).txDecodeAmino(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxEncode encodes the transaction.
     * @param {CosmosTxV1beta1TxEncodeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.txEncode = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).txEncode(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
     * @param {TxEncodeAminoRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.txEncodeAmino = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).txEncodeAmino(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServiceApi;
}(base_1.BaseAPI));
exports.ServiceApi = ServiceApi;
/**
 * @export
 */
exports.GetTxsEventOrderByEnum = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
};
