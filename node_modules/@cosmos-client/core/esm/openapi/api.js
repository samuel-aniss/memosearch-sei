/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos SDK - gRPC Gateway docs
 * A REST interface for state queries
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
export const BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
export const CosmosGovV1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
export const CosmosGovV1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
export const CosmosGovV1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const CosmosGovV1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const CosmosGovV1beta1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
export const CosmosGovV1beta1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
export const CosmosGovV1beta1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
export const CosmosGovV1beta1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const CosmosGovV1beta1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const CosmosGroupV1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
export const CosmosGroupV1ProposalExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
/**
 * ProposalExecutorResult defines types of proposal executor results.   - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.  - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.  - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.  - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn\'t update state.
 * @export
 * @enum {string}
 */
export const CosmosGroupV1ProposalExecutorResult = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
/**
 * ProposalStatus defines proposal statuses.   - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.  - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.  - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome passes the group policy\'s decision policy.  - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome is rejected by the group policy\'s decision policy.  - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the final tally.  - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 * @export
 * @enum {string}
 */
export const CosmosGroupV1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
export const CosmosGroupV1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * VoteOption enumerates the valid vote options for a given proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will return an error.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
export const CosmosGroupV1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
 * @export
 * @enum {string}
 */
export const CosmosStakingV1beta1BondStatus = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
export const CosmosStakingV1beta1ValidatorStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
/**
 * SignMode represents a signing mode with its own security guarantees.  This enum should be considered a registry of all known sign modes in the Cosmos ecosystem. Apps are not expected to support all known sign modes. Apps that would like to support custom  sign modes are encouraged to open a small PR against this file to add a new case to this SignMode enum describing their sign mode so that different apps have a consistent version of this enum.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected.  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. It is currently not supported.  - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers\' `signer_info`. It also allows for adding Tips in transactions.  Since: cosmos-sdk 0.46  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future.  - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191  Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future.  Since: cosmos-sdk 0.45.2
 * @export
 * @enum {string}
 */
export const CosmosTxSigningV1beta1SignMode = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead, BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
 * @export
 * @enum {string}
 */
export const CosmosTxV1beta1BroadcastMode = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
export const CosmosTxV1beta1BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
export const CosmosTxV1beta1ModeInfoSingleModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
/**
 * - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
 * @export
 * @enum {string}
 */
export const CosmosTxV1beta1OrderBy = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
};
export const DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerDuplicateVoteEvidenceVoteATypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
export const DeprecatedPleaseUseSdkBlockInsteadEvidenceEvidenceInnerLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesInnerBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
export const GovV1Proposal200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
export const GovV1Votes200ResponseVotesInnerOptionsInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const GroupProposal200ResponseProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
export const GroupProposal200ResponseProposalExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
export const Proposals200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
export const ProposalsByGroupPolicy200ResponseProposalsInnerStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    Submitted: 'PROPOSAL_STATUS_SUBMITTED',
    Accepted: 'PROPOSAL_STATUS_ACCEPTED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Aborted: 'PROPOSAL_STATUS_ABORTED',
    Withdrawn: 'PROPOSAL_STATUS_WITHDRAWN'
};
export const ProposalsByGroupPolicy200ResponseProposalsInnerExecutorResultEnum = {
    Unspecified: 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED',
    NotRun: 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN',
    Success: 'PROPOSAL_EXECUTOR_RESULT_SUCCESS',
    Failure: 'PROPOSAL_EXECUTOR_RESULT_FAILURE'
};
export const SingleRepresentsASingleSignerModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    DirectAux: 'SIGN_MODE_DIRECT_AUX',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON',
    Eip191: 'SIGN_MODE_EIP_191'
};
export const StakingDelegatorValidators200ResponseValidatorsInnerStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
/**
 *
 * @export
 * @enum {string}
 */
export const TendermintTypesBlockIDFlag = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
export const TendermintTypesCommitSigBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
/**
 * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
 * @export
 * @enum {string}
 */
export const TendermintTypesSignedMsgType = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
export const TendermintTypesVoteTypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
export const VoteByProposalVoter200ResponseVoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const Votes200ResponseVotesInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const Votes200ResponseVotesInnerOptionsInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
export const VotesByProposal200ResponseVotesInnerOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _class: async (classId, options = {}) => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('_class', 'classId', classId);
            const localVarPath = `/cosmos/nft/v1beta1/classes/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: async (address, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('account', 'address', address);
            const localVarPath = `/cosmos/auth/v1beta1/accounts/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAddressByID: async (id, accountId, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountAddressByID', 'id', id);
            const localVarPath = `/cosmos/auth/v1beta1/address_by_id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfo: async (address, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('accountInfo', 'address', address);
            const localVarPath = `/cosmos/auth/v1beta1/account_info/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/auth/v1beta1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressBytesToString: async (addressBytes, options = {}) => {
            // verify required parameter 'addressBytes' is not null or undefined
            assertParamExists('addressBytesToString', 'addressBytes', addressBytes);
            const localVarPath = `/cosmos/auth/v1beta1/bech32/{address_bytes}`
                .replace(`{${"address_bytes"}}`, encodeURIComponent(String(addressBytes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressStringToBytes: async (addressString, options = {}) => {
            // verify required parameter 'addressString' is not null or undefined
            assertParamExists('addressStringToBytes', 'addressString', addressString);
            const localVarPath = `/cosmos/auth/v1beta1/bech32/{address_string}`
                .replace(`{${"address_string"}}`, encodeURIComponent(String(addressString)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: async (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('allBalances', 'address', address);
            const localVarPath = `/cosmos/bank/v1beta1/balances/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/evidence/v1beta1/evidence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: async (granter, grantee, options = {}) => {
            // verify required parameter 'granter' is not null or undefined
            assertParamExists('allowance', 'granter', granter);
            // verify required parameter 'grantee' is not null or undefined
            assertParamExists('allowance', 'grantee', grantee);
            const localVarPath = `/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}`
                .replace(`{${"granter"}}`, encodeURIComponent(String(granter)))
                .replace(`{${"grantee"}}`, encodeURIComponent(String(grantee)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: async (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'grantee' is not null or undefined
            assertParamExists('allowances', 'grantee', grantee);
            const localVarPath = `/cosmos/feegrant/v1beta1/allowances/{grantee}`
                .replace(`{${"grantee"}}`, encodeURIComponent(String(grantee)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowancesByGranter: async (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'granter' is not null or undefined
            assertParamExists('allowancesByGranter', 'granter', granter);
            const localVarPath = `/cosmos/feegrant/v1beta1/issued/{granter}`
                .replace(`{${"granter"}}`, encodeURIComponent(String(granter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: async (options = {}) => {
            const localVarPath = `/cosmos/mint/v1beta1/annual_provisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('appliedPlan', 'name', name);
            const localVarPath = `/cosmos/upgrade/v1beta1/applied_plan/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: async (options = {}) => {
            const localVarPath = `/cosmos/auth/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authority: async (options = {}) => {
            const localVarPath = `/cosmos/upgrade/v1beta1/authority`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: async (address, denom, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('balance', 'address', address);
            const localVarPath = `/cosmos/bank/v1beta1/balances/{address}/by_denom`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (denom !== undefined) {
                localVarQueryParameter['denom'] = denom;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: async (options = {}) => {
            const localVarPath = `/cosmos/bank/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bech32Prefix: async (options = {}) => {
            const localVarPath = `/cosmos/auth/v1beta1/bech32`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classes: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/nft/v1beta1/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: async (options = {}) => {
            const localVarPath = `/cosmos/distribution/v1beta1/community_pool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: async (options = {}) => {
            const localVarPath = `/cosmos/upgrade/v1beta1/current_plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: async (validatorAddr, delegatorAddr, options = {}) => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('delegation', 'validatorAddr', validatorAddr);
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegation', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)))
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: async (delegatorAddress, validatorAddress, options = {}) => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegationRewards', 'delegatorAddress', delegatorAddress);
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('delegationRewards', 'validatorAddress', validatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)))
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: async (delegatorAddress, options = {}) => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegationTotalRewards', 'delegatorAddress', delegatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: async (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorDelegations', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/delegations/{delegator_addr}`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: async (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorUnbondingDelegations', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: async (delegatorAddr, validatorAddr, options = {}) => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorValidator', 'delegatorAddr', delegatorAddr);
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('delegatorValidator', 'validatorAddr', validatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: async (delegatorAddress, options = {}) => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegatorValidators', 'delegatorAddress', delegatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: async (delegatorAddress, options = {}) => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegatorWithdrawAddress', 'delegatorAddress', delegatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: async (denom, options = {}) => {
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('denomMetadata', 'denom', denom);
            const localVarPath = `/cosmos/bank/v1beta1/denoms_metadata/{denom}`
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: async (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('denomOwners', 'denom', denom);
            const localVarPath = `/cosmos/bank/v1beta1/denom_owners/{denom}`
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/bank/v1beta1/denoms_metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: async (proposalId, depositor, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('deposit', 'proposalId', proposalId);
            // verify required parameter 'depositor' is not null or undefined
            assertParamExists('deposit', 'depositor', depositor);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"depositor"}}`, encodeURIComponent(String(depositor)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: async (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('deposits', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: async (options = {}) => {
            const localVarPath = `/cosmos/distribution/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: async (hash, evidenceHash, options = {}) => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('evidence', 'hash', hash);
            const localVarPath = `/cosmos/evidence/v1beta1/evidence/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (evidenceHash !== undefined) {
                localVarQueryParameter['evidence_hash'] = evidenceHash;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: async (paramsType, options = {}) => {
            // verify required parameter 'paramsType' is not null or undefined
            assertParamExists('govParams', 'paramsType', paramsType);
            const localVarPath = `/cosmos/gov/v1beta1/params/{params_type}`
                .replace(`{${"params_type"}}`, encodeURIComponent(String(paramsType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit: async (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1Deposit', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}/deposits`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit_1: async (proposalId, depositor, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1Deposit_1', 'proposalId', proposalId);
            // verify required parameter 'depositor' is not null or undefined
            assertParamExists('govV1Deposit_1', 'depositor', depositor);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}/deposits/{depositor}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"depositor"}}`, encodeURIComponent(String(depositor)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Params: async (paramsType, options = {}) => {
            // verify required parameter 'paramsType' is not null or undefined
            assertParamExists('govV1Params', 'paramsType', paramsType);
            const localVarPath = `/cosmos/gov/v1/params/{params_type}`
                .replace(`{${"params_type"}}`, encodeURIComponent(String(paramsType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal: async (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/gov/v1/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (proposalStatus !== undefined) {
                localVarQueryParameter['proposal_status'] = proposalStatus;
            }
            if (voter !== undefined) {
                localVarQueryParameter['voter'] = voter;
            }
            if (depositor !== undefined) {
                localVarQueryParameter['depositor'] = depositor;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal_2: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1Proposal_2', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1TallyResult: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1TallyResult', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}/tally`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Vote: async (proposalId, voter, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1Vote', 'proposalId', proposalId);
            // verify required parameter 'voter' is not null or undefined
            assertParamExists('govV1Vote', 'voter', voter);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}/votes/{voter}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Votes: async (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('govV1Votes', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1/proposals/{proposal_id}/votes`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granteeGrants: async (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'grantee' is not null or undefined
            assertParamExists('granteeGrants', 'grantee', grantee);
            const localVarPath = `/cosmos/authz/v1beta1/grants/grantee/{grantee}`
                .replace(`{${"grantee"}}`, encodeURIComponent(String(grantee)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granterGrants: async (granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'granter' is not null or undefined
            assertParamExists('granterGrants', 'granter', granter);
            const localVarPath = `/cosmos/authz/v1beta1/grants/granter/{granter}`
                .replace(`{${"granter"}}`, encodeURIComponent(String(granter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: async (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/authz/v1beta1/grants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (granter !== undefined) {
                localVarQueryParameter['granter'] = granter;
            }
            if (grantee !== undefined) {
                localVarQueryParameter['grantee'] = grantee;
            }
            if (msgTypeUrl !== undefined) {
                localVarQueryParameter['msg_type_url'] = msgTypeUrl;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInfo: async (groupId, options = {}) => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupInfo', 'groupId', groupId);
            const localVarPath = `/cosmos/group/v1/group_info/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembers: async (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupMembers', 'groupId', groupId);
            const localVarPath = `/cosmos/group/v1/group_members/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByAdmin: async (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'admin' is not null or undefined
            assertParamExists('groupPoliciesByAdmin', 'admin', admin);
            const localVarPath = `/cosmos/group/v1/group_policies_by_admin/{admin}`
                .replace(`{${"admin"}}`, encodeURIComponent(String(admin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByGroup: async (groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupPoliciesByGroup', 'groupId', groupId);
            const localVarPath = `/cosmos/group/v1/group_policies_by_group/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPolicyInfo: async (address, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('groupPolicyInfo', 'address', address);
            const localVarPath = `/cosmos/group/v1/group_policy_info/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupProposal: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('groupProposal', 'proposalId', proposalId);
            const localVarPath = `/cosmos/group/v1/proposal/{proposal_id}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupTallyResult: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('groupTallyResult', 'proposalId', proposalId);
            const localVarPath = `/cosmos/group/v1/proposals/{proposal_id}/tally`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByAdmin: async (admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'admin' is not null or undefined
            assertParamExists('groupsByAdmin', 'admin', admin);
            const localVarPath = `/cosmos/group/v1/groups_by_admin/{admin}`
                .replace(`{${"admin"}}`, encodeURIComponent(String(admin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByMember: async (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('groupsByMember', 'address', address);
            const localVarPath = `/cosmos/group/v1/groups_by_member/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: async (height, options = {}) => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('historicalInfo', 'height', height);
            const localVarPath = `/cosmos/staking/v1beta1/historical_info/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: async (options = {}) => {
            const localVarPath = `/cosmos/mint/v1beta1/inflation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: async (options = {}) => {
            const localVarPath = `/cosmos/mint/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccountByName: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('moduleAccountByName', 'name', name);
            const localVarPath = `/cosmos/auth/v1beta1/module_accounts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccounts: async (options = {}) => {
            const localVarPath = `/cosmos/auth/v1beta1/module_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: async (moduleName, options = {}) => {
            const localVarPath = `/cosmos/upgrade/v1beta1/module_versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (moduleName !== undefined) {
                localVarQueryParameter['module_name'] = moduleName;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFT: async (classId, id, options = {}) => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('nFT', 'classId', classId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists('nFT', 'id', id);
            const localVarPath = `/cosmos/nft/v1beta1/nfts/{class_id}/{id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFTs: async (classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/nft/v1beta1/nfts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (classId !== undefined) {
                localVarQueryParameter['class_id'] = classId;
            }
            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftBalance: async (owner, classId, options = {}) => {
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('nftBalance', 'owner', owner);
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('nftBalance', 'classId', classId);
            const localVarPath = `/cosmos/nft/v1beta1/balance/{owner}/{class_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        owner: async (classId, id, options = {}) => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('owner', 'classId', classId);
            // verify required parameter 'id' is not null or undefined
            assertParamExists('owner', 'id', id);
            const localVarPath = `/cosmos/nft/v1beta1/owner/{class_id}/{id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: async (subspace, key, options = {}) => {
            const localVarPath = `/cosmos/params/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (subspace !== undefined) {
                localVarQueryParameter['subspace'] = subspace;
            }
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: async (options = {}) => {
            const localVarPath = `/cosmos/staking/v1beta1/pool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('proposal', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: async (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/gov/v1beta1/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (proposalStatus !== undefined) {
                localVarQueryParameter['proposal_status'] = proposalStatus;
            }
            if (voter !== undefined) {
                localVarQueryParameter['voter'] = voter;
            }
            if (depositor !== undefined) {
                localVarQueryParameter['depositor'] = depositor;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsByGroupPolicy: async (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('proposalsByGroupPolicy', 'address', address);
            const localVarPath = `/cosmos/group/v1/proposals_by_group_policy/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: async (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('redelegations', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (srcValidatorAddr !== undefined) {
                localVarQueryParameter['src_validator_addr'] = srcValidatorAddr;
            }
            if (dstValidatorAddr !== undefined) {
                localVarQueryParameter['dst_validator_addr'] = dstValidatorAddr;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEnabled: async (denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/bank/v1beta1/send_enabled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (denoms) {
                localVarQueryParameter['denoms'] = denoms;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: async (consAddress, options = {}) => {
            // verify required parameter 'consAddress' is not null or undefined
            assertParamExists('signingInfo', 'consAddress', consAddress);
            const localVarPath = `/cosmos/slashing/v1beta1/signing_infos/{cons_address}`
                .replace(`{${"cons_address"}}`, encodeURIComponent(String(consAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/slashing/v1beta1/signing_infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: async (options = {}) => {
            const localVarPath = `/cosmos/slashing/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalanceByDenom: async (address, denom, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('spendableBalanceByDenom', 'address', address);
            const localVarPath = `/cosmos/bank/v1beta1/spendable_balances/{address}/by_denom`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (denom !== undefined) {
                localVarQueryParameter['denom'] = denom;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalances: async (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('spendableBalances', 'address', address);
            const localVarPath = `/cosmos/bank/v1beta1/spendable_balances/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: async (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('stakingDelegatorValidators', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: async (options = {}) => {
            const localVarPath = `/cosmos/staking/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subspaces: async (options = {}) => {
            const localVarPath = `/cosmos/params/v1beta1/subspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supply: async (classId, options = {}) => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('supply', 'classId', classId);
            const localVarPath = `/cosmos/nft/v1beta1/supply/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: async (denom, options = {}) => {
            const localVarPath = `/cosmos/bank/v1beta1/supply/by_denom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (denom !== undefined) {
                localVarQueryParameter['denom'] = denom;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: async (proposalId, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('tallyResult', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/tally`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/bank/v1beta1/supply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: async (validatorAddr, delegatorAddr, options = {}) => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('unbondingDelegation', 'validatorAddr', validatorAddr);
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('unbondingDelegation', 'delegatorAddr', delegatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)))
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: async (lastHeight, options = {}) => {
            // verify required parameter 'lastHeight' is not null or undefined
            assertParamExists('upgradedConsensusState', 'lastHeight', lastHeight);
            const localVarPath = `/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}`
                .replace(`{${"last_height"}}`, encodeURIComponent(String(lastHeight)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: async (validatorAddr, options = {}) => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validator', 'validatorAddr', validatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: async (validatorAddress, options = {}) => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorCommission', 'validatorAddress', validatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/commission`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: async (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validatorDelegations', 'validatorAddr', validatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDistributionInfo: async (validatorAddress, options = {}) => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorDistributionInfo', 'validatorAddress', validatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: async (validatorAddress, options = {}) => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorOutstandingRewards', 'validatorAddress', validatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: async (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorSlashes', 'validatorAddress', validatorAddress);
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/slashes`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (startingHeight !== undefined) {
                localVarQueryParameter['starting_height'] = startingHeight;
            }
            if (endingHeight !== undefined) {
                localVarQueryParameter['ending_height'] = endingHeight;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: async (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validatorUnbondingDelegations', 'validatorAddr', validatorAddr);
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: async (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/staking/v1beta1/validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: async (proposalId, voter, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('vote', 'proposalId', proposalId);
            // verify required parameter 'voter' is not null or undefined
            assertParamExists('vote', 'voter', voter);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteByProposalVoter: async (proposalId, voter, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('voteByProposalVoter', 'proposalId', proposalId);
            // verify required parameter 'voter' is not null or undefined
            assertParamExists('voteByProposalVoter', 'voter', voter);
            const localVarPath = `/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: async (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('votes', 'proposalId', proposalId);
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByProposal: async (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('votesByProposal', 'proposalId', proposalId);
            const localVarPath = `/cosmos/group/v1/votes_by_proposal/{proposal_id}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByVoter: async (voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'voter' is not null or undefined
            assertParamExists('votesByVoter', 'voter', voter);
            const localVarPath = `/cosmos/group/v1/votes_by_voter/{voter}`
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function (configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _class(classId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator._class(classId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async account(address, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.account(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAddressByID(id, accountId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAddressByID(id, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountInfo(address, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountInfo(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressBytesToString(addressBytes, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressBytesToString(addressBytes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addressStringToBytes(addressString, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addressStringToBytes(addressString, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowance(granter, grantee, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowance(granter, grantee, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annualProvisions(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annualProvisions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appliedPlan(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appliedPlan(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authority(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authority(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balance(address, denom, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balance(address, denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bech32Prefix(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bech32Prefix(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async communityPool(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.communityPool(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentPlan(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentPlan(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegation(validatorAddr, delegatorAddr, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegation(validatorAddr, delegatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationRewards(delegatorAddress, validatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationRewards(delegatorAddress, validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationTotalRewards(delegatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationTotalRewards(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorValidator(delegatorAddr, validatorAddr, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorValidator(delegatorAddr, validatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorValidators(delegatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorValidators(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorWithdrawAddress(delegatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorWithdrawAddress(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomMetadata(denom, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomMetadata(denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deposit(proposalId, depositor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deposit(proposalId, depositor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async distributionParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.distributionParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evidence(hash, evidenceHash, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evidence(hash, evidenceHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govParams(paramsType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govParams(paramsType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Deposit_1(proposalId, depositor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Deposit_1(proposalId, depositor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Params(paramsType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Params(paramsType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Proposal_2(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Proposal_2(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1TallyResult(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1TallyResult(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Vote(proposalId, voter, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Vote(proposalId, voter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupInfo(groupId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupInfo(groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPolicyInfo(address, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupPolicyInfo(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupProposal(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupProposal(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupTallyResult(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupTallyResult(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicalInfo(height, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historicalInfo(height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inflation(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inflation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mintParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mintParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleAccountByName(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleAccountByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleAccounts(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleVersions(moduleName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleVersions(moduleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nFT(classId, id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nFT(classId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftBalance(owner, classId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftBalance(owner, classId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async owner(classId, id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.owner(classId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async params(subspace, key, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.params(subspace, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pool(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pool(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposal(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposal(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signingInfo(consAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signingInfo(consAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async slashingParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.slashingParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendableBalanceByDenom(address, denom, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendableBalanceByDenom(address, denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stakingParams(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stakingParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subspaces(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subspaces(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supply(classId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supply(classId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyOf(denom, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyOf(denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tallyResult(proposalId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tallyResult(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unbondingDelegation(validatorAddr, delegatorAddr, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unbondingDelegation(validatorAddr, delegatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradedConsensusState(lastHeight, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upgradedConsensusState(lastHeight, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validator(validatorAddr, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validator(validatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorCommission(validatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorCommission(validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorDistributionInfo(validatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorDistributionInfo(validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorOutstandingRewards(validatorAddress, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorOutstandingRewards(validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vote(proposalId, voter, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vote(proposalId, voter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voteByProposalVoter(proposalId, voter, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voteByProposalVoter(proposalId, voter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = QueryApiFp(configuration);
    return {
        /**
         *
         * @summary Class queries an NFT class based on its id
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _class(classId, options) {
            return localVarFp._class(classId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account(address, options) {
            return localVarFp.account(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46.2
         * @summary AccountAddressByID returns account address based on account number.
         * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
         * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAddressByID(id, accountId, options) {
            return localVarFp.accountAddressByID(id, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary AccountInfo queries account info which is common to all account types.
         * @param {string} address address is the account address string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfo(address, options) {
            return localVarFp.accountInfo(address, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
         * @summary Accounts returns all the existing accounts.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressBytesToString converts Account Address bytes to string
         * @param {string} addressBytes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressBytesToString(addressBytes, options) {
            return localVarFp.addressBytesToString(addressBytes, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AddressStringToBytes converts Address string to bytes
         * @param {string} addressString
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressStringToBytes(addressString, options) {
            return localVarFp.addressStringToBytes(addressString, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance(granter, grantee, options) {
            return localVarFp.allowance(granter, grantee, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary AllowancesByGranter returns all the grants given by an address
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions(options) {
            return localVarFp.annualProvisions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan(name, options) {
            return localVarFp.appliedPlan(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams(options) {
            return localVarFp.authParams(options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Returns the account with authority to conduct upgrades
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authority(options) {
            return localVarFp.authority(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance(address, denom, options) {
            return localVarFp.balance(address, denom, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams(options) {
            return localVarFp.bankParams(options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Bech32Prefix queries bech32Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bech32Prefix(options) {
            return localVarFp.bech32Prefix(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Classes queries all NFT classes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool(options) {
            return localVarFp.communityPool(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan(options) {
            return localVarFp.currentPlan(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation(validatorAddr, delegatorAddr, options) {
            return localVarFp.delegation(validatorAddr, delegatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards(delegatorAddress, validatorAddress, options) {
            return localVarFp.delegationRewards(delegatorAddress, validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards(delegatorAddress, options) {
            return localVarFp.delegationTotalRewards(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator(delegatorAddr, validatorAddr, options) {
            return localVarFp.delegatorValidator(delegatorAddr, validatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators(delegatorAddress, options) {
            return localVarFp.delegatorValidators(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress(delegatorAddress, options) {
            return localVarFp.delegatorWithdrawAddress(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata(denom, options) {
            return localVarFp.denomMetadata(denom, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit(proposalId, depositor, options) {
            return localVarFp.deposit(proposalId, depositor, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams(options) {
            return localVarFp.distributionParams(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
         * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence(hash, evidenceHash, options) {
            return localVarFp.evidence(hash, evidenceHash, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams(paramsType, options) {
            return localVarFp.govParams(paramsType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Deposit_1(proposalId, depositor, options) {
            return localVarFp.govV1Deposit_1(proposalId, depositor, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Params(paramsType, options) {
            return localVarFp.govV1Params(paramsType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Proposal_2(proposalId, options) {
            return localVarFp.govV1Proposal_2(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1TallyResult(proposalId, options) {
            return localVarFp.govV1TallyResult(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Vote(proposalId, voter, options) {
            return localVarFp.govV1Vote(proposalId, voter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
         * @param {string} granter
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupInfo queries group info based on group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupInfo(groupId, options) {
            return localVarFp.groupInfo(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupMembers queries members of a group by group id.
         * @param {string} groupId group_id is the unique ID of the group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupPoliciesByAdmin queries group policies by admin address.
         * @param {string} admin admin is the admin address of the group policy.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupPoliciesByGroup queries group policies by group id.
         * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
         * @param {string} address address is the account address of the group policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPolicyInfo(address, options) {
            return localVarFp.groupPolicyInfo(address, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Proposal queries a proposal based on proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupProposal(proposalId, options) {
            return localVarFp.groupProposal(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
         * @param {string} proposalId proposal_id is the unique id of a proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupTallyResult(proposalId, options) {
            return localVarFp.groupTallyResult(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupsByAdmin queries groups by admin address.
         * @param {string} admin admin is the account address of a group\&#39;s admin.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GroupsByMember queries groups by member address.
         * @param {string} address address is the group member address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo(height, options) {
            return localVarFp.historicalInfo(height, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation(options) {
            return localVarFp.inflation(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams(options) {
            return localVarFp.mintParams(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ModuleAccountByName returns the module account info by module name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccountByName(name, options) {
            return localVarFp.moduleAccountByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary ModuleAccounts returns all the existing module accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleAccounts(options) {
            return localVarFp.moduleAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.43
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions(moduleName, options) {
            return localVarFp.moduleVersions(moduleName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary NFT queries an NFT based on its class and id.
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFT(classId, id, options) {
            return localVarFp.nFT(classId, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
         * @param {string} [classId] class_id associated with the nft.
         * @param {string} [owner] owner is the owner address of the nft.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
         * @param {string} owner owner is the owner address of the nft
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftBalance(owner, classId, options) {
            return localVarFp.nftBalance(owner, classId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
         * @param {string} classId class_id associated with the nft
         * @param {string} id id is a unique identifier of the NFT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        owner(classId, id, options) {
            return localVarFp.owner(classId, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params(subspace, key, options) {
            return localVarFp.params(subspace, key, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool(options) {
            return localVarFp.pool(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal(proposalId, options) {
            return localVarFp.proposal(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
         * @param {string} address address is the account address of the group policy related to proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
         * @summary SendEnabled queries for SendEnabled entries.
         * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo(consAddress, options) {
            return localVarFp.signingInfo(consAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams(options) {
            return localVarFp.slashingParams(options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
         * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalanceByDenom(address, denom, options) {
            return localVarFp.spendableBalanceByDenom(address, denom, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
         * @summary SpendableBalances queries the spendable balance of all coins for a single account.
         * @param {string} address address is the address to query spendable balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams(options) {
            return localVarFp.stakingParams(options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.46
         * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subspaces(options) {
            return localVarFp.subspaces(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
         * @param {string} classId class_id associated with the nft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supply(classId, options) {
            return localVarFp.supply(classId, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} [denom] denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf(denom, options) {
            return localVarFp.supplyOf(denom, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult(proposalId, options) {
            return localVarFp.tallyResult(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation(validatorAddr, delegatorAddr, options) {
            return localVarFp.unbondingDelegation(validatorAddr, delegatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState(lastHeight, options) {
            return localVarFp.upgradedConsensusState(lastHeight, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator(validatorAddr, options) {
            return localVarFp.validator(validatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission(validatorAddress, options) {
            return localVarFp.validatorCommission(validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDistributionInfo(validatorAddress, options) {
            return localVarFp.validatorDistributionInfo(validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards(validatorAddress, options) {
            return localVarFp.validatorOutstandingRewards(validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the voter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote(proposalId, voter, options) {
            return localVarFp.vote(proposalId, voter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary VoteByProposalVoter queries a vote by proposal id and voter.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} voter voter is a proposal voter account address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteByProposalVoter(proposalId, voter, options) {
            return localVarFp.voteByProposalVoter(proposalId, voter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary VotesByProposal queries a vote by proposal id.
         * @param {string} proposalId proposal_id is the unique ID of a proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary VotesByVoter queries a vote by voter.
         * @param {string} voter voter is a proposal voter account address.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     *
     * @summary Class queries an NFT class based on its id
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    _class(classId, options) {
        return QueryApiFp(this.configuration)._class(classId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    account(address, options) {
        return QueryApiFp(this.configuration).account(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46.2
     * @summary AccountAddressByID returns account address based on account number.
     * @param {string} id Deprecated, use account_id instead  id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
     * @param {string} [accountId] account_id is the account number of the address to be queried.  Since: cosmos-sdk 0.47
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    accountAddressByID(id, accountId, options) {
        return QueryApiFp(this.configuration).accountAddressByID(id, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.47
     * @summary AccountInfo queries account info which is common to all account types.
     * @param {string} address address is the account address string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    accountInfo(address, options) {
        return QueryApiFp(this.configuration).accountInfo(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.43
     * @summary Accounts returns all the existing accounts.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary AddressBytesToString converts Account Address bytes to string
     * @param {string} addressBytes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    addressBytesToString(addressBytes, options) {
        return QueryApiFp(this.configuration).addressBytesToString(addressBytes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary AddressStringToBytes converts Address string to bytes
     * @param {string} addressString
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    addressStringToBytes(addressString, options) {
        return QueryApiFp(this.configuration).addressStringToBytes(addressString, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Allowance returns fee granted to the grantee by the granter.
     * @param {string} granter granter is the address of the user granting an allowance of their funds.
     * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    allowance(granter, grantee, options) {
        return QueryApiFp(this.configuration).allowance(granter, grantee, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Allowances returns all the grants for address.
     * @param {string} grantee
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary AllowancesByGranter returns all the grants given by an address
     * @param {string} granter
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).allowancesByGranter(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    annualProvisions(options) {
        return QueryApiFp(this.configuration).annualProvisions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    appliedPlan(name, options) {
        return QueryApiFp(this.configuration).appliedPlan(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    authParams(options) {
        return QueryApiFp(this.configuration).authParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary Returns the account with authority to conduct upgrades
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    authority(options) {
        return QueryApiFp(this.configuration).authority(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    balance(address, denom, options) {
        return QueryApiFp(this.configuration).balance(address, denom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    bankParams(options) {
        return QueryApiFp(this.configuration).bankParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary Bech32Prefix queries bech32Prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    bech32Prefix(options) {
        return QueryApiFp(this.configuration).bech32Prefix(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Classes queries all NFT classes
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).classes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    communityPool(options) {
        return QueryApiFp(this.configuration).communityPool(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    currentPlan(options) {
        return QueryApiFp(this.configuration).currentPlan(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegation(validatorAddr, delegatorAddr, options) {
        return QueryApiFp(this.configuration).delegation(validatorAddr, delegatorAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegationRewards(delegatorAddress, validatorAddress, options) {
        return QueryApiFp(this.configuration).delegationRewards(delegatorAddress, validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegationTotalRewards(delegatorAddress, options) {
        return QueryApiFp(this.configuration).delegationTotalRewards(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegatorValidator(delegatorAddr, validatorAddr, options) {
        return QueryApiFp(this.configuration).delegatorValidator(delegatorAddr, validatorAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegatorValidators(delegatorAddress, options) {
        return QueryApiFp(this.configuration).delegatorValidators(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    delegatorWithdrawAddress(delegatorAddress, options) {
        return QueryApiFp(this.configuration).delegatorWithdrawAddress(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DenomsMetadata queries the client metadata of a given coin denomination.
     * @param {string} denom denom is the coin denom to query the metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    denomMetadata(denom, options) {
        return QueryApiFp(this.configuration).denomMetadata(denom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
     * @summary DenomOwners queries for all account addresses that own a particular token denomination.
     * @param {string} denom denom defines the coin denomination to query all account holders for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    deposit(proposalId, depositor, options) {
        return QueryApiFp(this.configuration).deposit(proposalId, depositor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    distributionParams(options) {
        return QueryApiFp(this.configuration).distributionParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} hash hash defines the evidence hash of the requested evidence.  Since: cosmos-sdk 0.47
     * @param {string} [evidenceHash] evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    evidence(hash, evidenceHash, options) {
        return QueryApiFp(this.configuration).evidence(hash, evidenceHash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govParams(paramsType, options) {
        return QueryApiFp(this.configuration).govParams(paramsType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).govV1Deposit(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Deposit_1(proposalId, depositor, options) {
        return QueryApiFp(this.configuration).govV1Deposit_1(proposalId, depositor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Params(paramsType, options) {
        return QueryApiFp(this.configuration).govV1Params(paramsType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {GovV1ProposalProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).govV1Proposal(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Proposal_2(proposalId, options) {
        return QueryApiFp(this.configuration).govV1Proposal_2(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1TallyResult(proposalId, options) {
        return QueryApiFp(this.configuration).govV1TallyResult(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the voter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Vote(proposalId, voter, options) {
        return QueryApiFp(this.configuration).govV1Vote(proposalId, voter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).govV1Votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary GranteeGrants returns a list of `GrantAuthorization` by grantee.
     * @param {string} grantee
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).granteeGrants(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary GranterGrants returns list of `GrantAuthorization`, granted by granter.
     * @param {string} granter
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).granterGrants(granter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns list of `Authorization`, granted to the grantee by the granter.
     * @param {string} [granter]
     * @param {string} [grantee]
     * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupInfo queries group info based on group id.
     * @param {string} groupId group_id is the unique ID of the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupInfo(groupId, options) {
        return QueryApiFp(this.configuration).groupInfo(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupMembers queries members of a group by group id.
     * @param {string} groupId group_id is the unique ID of the group.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).groupMembers(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupPoliciesByAdmin queries group policies by admin address.
     * @param {string} admin admin is the admin address of the group policy.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).groupPoliciesByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupPoliciesByGroup queries group policies by group id.
     * @param {string} groupId group_id is the unique ID of the group policy\&#39;s group.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).groupPoliciesByGroup(groupId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupPolicyInfo queries group policy info based on account address of group policy.
     * @param {string} address address is the account address of the group policy.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupPolicyInfo(address, options) {
        return QueryApiFp(this.configuration).groupPolicyInfo(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Proposal queries a proposal based on proposal id.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupProposal(proposalId, options) {
        return QueryApiFp(this.configuration).groupProposal(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary TallyResult returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
     * @param {string} proposalId proposal_id is the unique id of a proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupTallyResult(proposalId, options) {
        return QueryApiFp(this.configuration).groupTallyResult(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupsByAdmin queries groups by admin address.
     * @param {string} admin admin is the account address of a group\&#39;s admin.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).groupsByAdmin(admin, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GroupsByMember queries groups by member address.
     * @param {string} address address is the group member address.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).groupsByMember(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    historicalInfo(height, options) {
        return QueryApiFp(this.configuration).historicalInfo(height, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    inflation(options) {
        return QueryApiFp(this.configuration).inflation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    mintParams(options) {
        return QueryApiFp(this.configuration).mintParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ModuleAccountByName returns the module account info by module name
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    moduleAccountByName(name, options) {
        return QueryApiFp(this.configuration).moduleAccountByName(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary ModuleAccounts returns all the existing module accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    moduleAccounts(options) {
        return QueryApiFp(this.configuration).moduleAccounts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.43
     * @summary ModuleVersions queries the list of module versions from state.
     * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    moduleVersions(moduleName, options) {
        return QueryApiFp(this.configuration).moduleVersions(moduleName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary NFT queries an NFT based on its class and id.
     * @param {string} classId class_id associated with the nft
     * @param {string} id id is a unique identifier of the NFT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    nFT(classId, id, options) {
        return QueryApiFp(this.configuration).nFT(classId, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
     * @param {string} [classId] class_id associated with the nft.
     * @param {string} [owner] owner is the owner address of the nft.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).nFTs(classId, owner, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
     * @param {string} owner owner is the owner address of the nft
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    nftBalance(owner, classId, options) {
        return QueryApiFp(this.configuration).nftBalance(owner, classId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
     * @param {string} classId class_id associated with the nft
     * @param {string} id id is a unique identifier of the NFT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    owner(classId, id, options) {
        return QueryApiFp(this.configuration).owner(classId, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    params(subspace, key, options) {
        return QueryApiFp(this.configuration).params(subspace, key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    pool(options) {
        return QueryApiFp(this.configuration).pool(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    proposal(proposalId, options) {
        return QueryApiFp(this.configuration).proposal(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {ProposalsProposalStatusEnum} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ProposalsByGroupPolicy queries proposals based on account address of group policy.
     * @param {string} address address is the account address of the group policy related to proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).proposalsByGroupPolicy(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query.  Since: cosmos-sdk 0.47
     * @summary SendEnabled queries for SendEnabled entries.
     * @param {Array<string>} [denoms] denoms is the specific denoms you want look up. Leave empty to get all entries.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).sendEnabled(denoms, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    signingInfo(consAddress, options) {
        return QueryApiFp(this.configuration).signingInfo(consAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    slashingParams(options) {
        return QueryApiFp(this.configuration).slashingParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.47
     * @summary SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    spendableBalanceByDenom(address, denom, options) {
        return QueryApiFp(this.configuration).spendableBalanceByDenom(address, denom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.  Since: cosmos-sdk 0.46
     * @summary SpendableBalances queries the spendable balance of all coins for a single account.
     * @param {string} address address is the address to query spendable balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).spendableBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    stakingParams(options) {
        return QueryApiFp(this.configuration).stakingParams(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.46
     * @summary Subspaces queries for all registered subspaces and all keys for a subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    subspaces(options) {
        return QueryApiFp(this.configuration).subspaces(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
     * @param {string} classId class_id associated with the nft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    supply(classId, options) {
        return QueryApiFp(this.configuration).supply(classId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} [denom] denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    supplyOf(denom, options) {
        return QueryApiFp(this.configuration).supplyOf(denom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    tallyResult(proposalId, options) {
        return QueryApiFp(this.configuration).tallyResult(proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary TotalSupply queries the total supply of all coins.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    unbondingDelegation(validatorAddr, delegatorAddr, options) {
        return QueryApiFp(this.configuration).unbondingDelegation(validatorAddr, delegatorAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    upgradedConsensusState(lastHeight, options) {
        return QueryApiFp(this.configuration).upgradedConsensusState(lastHeight, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validator(validatorAddr, options) {
        return QueryApiFp(this.configuration).validator(validatorAddr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorCommission(validatorAddress, options) {
        return QueryApiFp(this.configuration).validatorCommission(validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorDistributionInfo(validatorAddress, options) {
        return QueryApiFp(this.configuration).validatorDistributionInfo(validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorOutstandingRewards(validatorAddress, options) {
        return QueryApiFp(this.configuration).validatorOutstandingRewards(validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the voter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    vote(proposalId, voter, options) {
        return QueryApiFp(this.configuration).vote(proposalId, voter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary VoteByProposalVoter queries a vote by proposal id and voter.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {string} voter voter is a proposal voter account address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    voteByProposalVoter(proposalId, voter, options) {
        return QueryApiFp(this.configuration).voteByProposalVoter(proposalId, voter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary VotesByProposal queries a vote by proposal id.
     * @param {string} proposalId proposal_id is the unique ID of a proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).votesByProposal(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary VotesByVoter queries a vote by voter.
     * @param {string} voter voter is a proposal voter account address.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return QueryApiFp(this.configuration).votesByVoter(voter, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GovV1ProposalProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * @export
 */
export const ProposalsProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aBCIQuery: async (data, path, height, prove, options = {}) => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/abci_query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }
            if (prove !== undefined) {
                localVarQueryParameter['prove'] = prove;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('broadcastTx', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/txs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: async (height, options = {}) => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('getBlockByHeight', 'height', height);
            const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockWithTxs: async (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('getBlockWithTxs', 'height', height);
            const localVarPath = `/cosmos/tx/v1beta1/txs/block/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: async (options = {}) => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: async (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: async (options = {}) => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/node_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: async (options = {}) => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/syncing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: async (hash, options = {}) => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getTx', 'hash', hash);
            const localVarPath = `/cosmos/tx/v1beta1/txs/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: async (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options = {}) => {
            const localVarPath = `/cosmos/tx/v1beta1/txs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (events) {
                localVarQueryParameter['events'] = events;
            }
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: async (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options = {}) => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('getValidatorSetByHeight', 'height', height);
            const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }
            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }
            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }
            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }
            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('simulate', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecode: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('txDecode', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/decode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecodeAmino: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('txDecodeAmino', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/decode/amino`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncode: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('txEncode', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/encode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncodeAmino: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('txEncodeAmino', 'body', body);
            const localVarPath = `/cosmos/tx/v1beta1/encode/amino`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function (configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration);
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aBCIQuery(data, path, height, prove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aBCIQuery(data, path, height, prove, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async broadcastTx(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTx(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockByHeight(height, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockByHeight(height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlock(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestBlock(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeInfo(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncing(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSyncing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTx(hash, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTx(hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulate(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async txDecode(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.txDecode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async txDecodeAmino(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.txDecodeAmino(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async txEncode(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.txEncode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async txEncodeAmino(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.txEncodeAmino(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ServiceApiFp(configuration);
    return {
        /**
         * Since: cosmos-sdk 0.46
         * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
         * @param {string} [data]
         * @param {string} [path]
         * @param {string} [height]
         * @param {boolean} [prove]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aBCIQuery(data, path, height, prove, options) {
            return localVarFp.aBCIQuery(data, path, height, prove, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {BroadcastTxRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx(body, options) {
            return localVarFp.broadcastTx(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight(height, options) {
            return localVarFp.getBlockByHeight(height, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.45.2
         * @summary GetBlockWithTxs fetches a block with decoded txs.
         * @param {string} height height is the height of the block to query.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock(options) {
            return localVarFp.getLatestBlock(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo(options) {
            return localVarFp.getNodeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing(options) {
            return localVarFp.getSyncing(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx(hash, options) {
            return localVarFp.getTx(hash, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
         * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
            return localVarFp.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate(body, options) {
            return localVarFp.simulate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecode decodes the transaction.
         * @param {TxDecodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecode(body, options) {
            return localVarFp.txDecode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
         * @param {TxDecodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txDecodeAmino(body, options) {
            return localVarFp.txDecodeAmino(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncode encodes the transaction.
         * @param {CosmosTxV1beta1TxEncodeRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncode(body, options) {
            return localVarFp.txEncode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Since: cosmos-sdk 0.47
         * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
         * @param {TxEncodeAminoRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txEncodeAmino(body, options) {
            return localVarFp.txEncodeAmino(body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * Since: cosmos-sdk 0.46
     * @summary ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.
     * @param {string} [data]
     * @param {string} [path]
     * @param {string} [height]
     * @param {boolean} [prove]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    aBCIQuery(data, path, height, prove, options) {
        return ServiceApiFp(this.configuration).aBCIQuery(data, path, height, prove, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {BroadcastTxRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    broadcastTx(body, options) {
        return ServiceApiFp(this.configuration).broadcastTx(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getBlockByHeight(height, options) {
        return ServiceApiFp(this.configuration).getBlockByHeight(height, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.45.2
     * @summary GetBlockWithTxs fetches a block with decoded txs.
     * @param {string} height height is the height of the block to query.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return ServiceApiFp(this.configuration).getBlockWithTxs(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getLatestBlock(options) {
        return ServiceApiFp(this.configuration).getLatestBlock(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return ServiceApiFp(this.configuration).getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getNodeInfo(options) {
        return ServiceApiFp(this.configuration).getNodeInfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getSyncing(options) {
        return ServiceApiFp(this.configuration).getSyncing(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getTx(hash, options) {
        return ServiceApiFp(this.configuration).getTx(hash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {GetTxsEventOrderByEnum} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
     * @param {string} [page] page is the page number to query, starts at 1. If not provided, will default to first page.
     * @param {string} [limit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options) {
        return ServiceApiFp(this.configuration).getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        return ServiceApiFp(this.configuration).getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    simulate(body, options) {
        return ServiceApiFp(this.configuration).simulate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxDecode decodes the transaction.
     * @param {TxDecodeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    txDecode(body, options) {
        return ServiceApiFp(this.configuration).txDecode(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
     * @param {TxDecodeAminoRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    txDecodeAmino(body, options) {
        return ServiceApiFp(this.configuration).txDecodeAmino(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxEncode encodes the transaction.
     * @param {CosmosTxV1beta1TxEncodeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    txEncode(body, options) {
        return ServiceApiFp(this.configuration).txEncode(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Since: cosmos-sdk 0.47
     * @summary TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
     * @param {TxEncodeAminoRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    txEncodeAmino(body, options) {
        return ServiceApiFp(this.configuration).txEncodeAmino(body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GetTxsEventOrderByEnum = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
};
