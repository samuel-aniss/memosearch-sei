import { GovV1ProposalProposalStatusEnum } from '../../openapi/api';
import { CosmosSDK } from '../../sdk';
export declare function params(sdk: CosmosSDK, paramsType: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovParams200Response, any>>;
export declare function govV1Params(sdk: CosmosSDK, paramsType: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1Params200Response, any>>;
export declare function proposals(sdk: CosmosSDK, proposalStatus?: 'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED', voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").Proposals200Response, any>>;
export declare function govV1Proposals(sdk: CosmosSDK, proposalStatus?: GovV1ProposalProposalStatusEnum, voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1Proposal200Response, any>>;
export declare function proposal(sdk: CosmosSDK, proposalID: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").Proposal200Response, any>>;
export declare function govV1Proposal(sdk: CosmosSDK, proposalID: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1Proposal200Response1, any>>;
export declare function deposits(sdk: CosmosSDK, proposalID: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").Deposits200Response, any>>;
export declare function govV1Deposits(sdk: CosmosSDK, proposalID: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").Deposits200Response, any>>;
export declare function deposit(sdk: CosmosSDK, proposalID: string, depositor: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").Deposit200Response, any>>;
export declare function govV1Deposit(sdk: CosmosSDK, proposalID: string, depositor: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").Deposit200Response, any>>;
export declare function tallyresult(sdk: CosmosSDK, proposalID: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").TallyResult200Response, any>>;
export declare function govV1TallyResult(sdk: CosmosSDK, proposalID: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1TallyResult200Response, any>>;
export declare function votes(sdk: CosmosSDK, proposalID: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").Votes200Response, any>>;
export declare function govV1Votes(sdk: CosmosSDK, proposalID: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1Votes200Response, any>>;
export declare function vote(sdk: CosmosSDK, proposalID: string, voter: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").Vote200Response, any>>;
export declare function govV1Vote(sdk: CosmosSDK, proposalID: string, voter: string): Promise<import("axios").AxiosResponse<import("../../openapi/api").GovV1Vote200Response, any>>;
