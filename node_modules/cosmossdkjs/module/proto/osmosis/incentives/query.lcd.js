import { LCDClient } from "@osmonauts/lcd";
import { setPaginationParams } from "@osmonauts/helpers";
export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }) {
    super({
      restEndpoint
    });
  }
  /* returns coins that is going to be distributed */


  async moduleToDistributeCoins(_params = {}) {
    const endpoint = `osmosis/incentives/v1beta1/module_to_distribute_coins`;
    return await this.request(endpoint);
  }
  /* returns coins that are distributed by module so far */


  async moduleDistributedCoins(_params = {}) {
    const endpoint = `osmosis/incentives/v1beta1/module_distributed_coins`;
    return await this.request(endpoint);
  }
  /* returns Gauge by id */


  async gaugeByID(params) {
    const endpoint = `osmosis/incentives/v1beta1/gauge_by_id/${params.id}`;
    return await this.request(endpoint);
  }
  /* returns gauges both upcoming and active */


  async gauges(params = {
    pagination: undefined
  }) {
    const options = {
      params: {}
    };

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/incentives/v1beta1/gauges`;
    return await this.request(endpoint, options);
  }
  /* returns active gauges */


  async activeGauges(params = {
    pagination: undefined
  }) {
    const options = {
      params: {}
    };

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/incentives/v1beta1/active_gauges`;
    return await this.request(endpoint, options);
  }
  /* returns active gauges per denom */


  async activeGaugesPerDenom(params) {
    const options = {
      params: {}
    };

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/incentives/v1beta1/active_gauges_per_denom`;
    return await this.request(endpoint, options);
  }
  /* returns scheduled gauges */


  async upcomingGauges(params = {
    pagination: undefined
  }) {
    const options = {
      params: {}
    };

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/incentives/v1beta1/upcoming_gauges`;
    return await this.request(endpoint, options);
  }
  /* returns scheduled gauges per denom */


  async upcomingGaugesPerDenom(params) {
    const options = {
      params: {}
    };

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/incentives/v1beta1/upcoming_gauges_per_denom`;
    return await this.request(endpoint, options);
  }
  /* RewardsEst returns an estimate of the rewards at a future specific time.
  The querier either provides an address or a set of locks
  for which they want to find the associated rewards. */


  async rewardsEst(params) {
    const options = {
      params: {}
    };

    if (typeof params?.lockIds !== "undefined") {
      options.params.lock_ids = params.lockIds;
    }

    if (typeof params?.endEpoch !== "undefined") {
      options.params.end_epoch = params.endEpoch;
    }

    const endpoint = `osmosis/incentives/v1beta1/rewards_est/${params.owner}`;
    return await this.request(endpoint, options);
  }
  /* returns lockable durations that are valid to give incentives */


  async lockableDurations(_params = {}) {
    const endpoint = `osmosis/incentives/v1beta1/lockable_durations`;
    return await this.request(endpoint);
  }

}