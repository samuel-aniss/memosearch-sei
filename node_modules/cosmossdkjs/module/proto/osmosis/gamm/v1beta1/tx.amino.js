import { Long } from "@osmonauts/helpers";
export const AminoConverter = {
  "/osmosis.gamm.v1beta1.MsgJoinPool": {
    aminoType: "osmosis/gamm/join-pool",
    toAmino: ({
      sender,
      poolId,
      shareOutAmount,
      tokenInMaxs
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    },
    fromAmino: ({
      sender,
      poolId,
      shareOutAmount,
      tokenInMaxs
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitPool": {
    aminoType: "osmosis/gamm/exit-pool",
    toAmino: ({
      sender,
      poolId,
      shareInAmount,
      tokenOutMins
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        shareInAmount,
        tokenOutMins: tokenOutMins.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    },
    fromAmino: ({
      sender,
      poolId,
      shareInAmount,
      tokenOutMins
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        shareInAmount,
        tokenOutMins: tokenOutMins.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn": {
    aminoType: "osmosis/gamm/swap-exact-amount-in",
    toAmino: ({
      sender,
      routes,
      tokenIn,
      tokenOutMinAmount
    }) => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: el0.poolId.toString(),
          tokenOutDenom: el0.tokenOutDenom
        })),
        tokenIn: {
          denom: tokenIn.denom,
          amount: Long.fromNumber(tokenIn.amount).toString()
        },
        tokenOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      routes,
      tokenIn,
      tokenOutMinAmount
    }) => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: Long.fromString(el0.poolId),
          tokenOutDenom: el0.tokenOutDenom
        })),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        tokenOutMinAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut": {
    aminoType: "osmosis/gamm/swap-exact-amount-out",
    toAmino: ({
      sender,
      routes,
      tokenInMaxAmount,
      tokenOut
    }) => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: el0.poolId.toString(),
          tokenInDenom: el0.tokenInDenom
        })),
        tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: Long.fromNumber(tokenOut.amount).toString()
        }
      };
    },
    fromAmino: ({
      sender,
      routes,
      tokenInMaxAmount,
      tokenOut
    }) => {
      return {
        sender,
        routes: routes.map(el0 => ({
          poolId: Long.fromString(el0.poolId),
          tokenInDenom: el0.tokenInDenom
        })),
        tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        }
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn": {
    aminoType: "osmosis/gamm/join-swap-extern-amount-in",
    toAmino: ({
      sender,
      poolId,
      tokenIn,
      shareOutMinAmount
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenIn: {
          denom: tokenIn.denom,
          amount: Long.fromNumber(tokenIn.amount).toString()
        },
        shareOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenIn,
      shareOutMinAmount
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        shareOutMinAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut": {
    aminoType: "osmosis/gamm/join-swap-share-amount-out",
    toAmino: ({
      sender,
      poolId,
      tokenInDenom,
      shareOutAmount,
      tokenInMaxAmount
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenInDenom,
        shareOutAmount,
        tokenInMaxAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenInDenom,
      shareOutAmount,
      tokenInMaxAmount
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenInDenom,
        shareOutAmount,
        tokenInMaxAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut": {
    aminoType: "osmosis/gamm/exit-swap-extern-amount-out",
    toAmino: ({
      sender,
      poolId,
      tokenOut,
      shareInMaxAmount
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenOut: {
          denom: tokenOut.denom,
          amount: Long.fromNumber(tokenOut.amount).toString()
        },
        shareInMaxAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenOut,
      shareInMaxAmount
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        },
        shareInMaxAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn": {
    aminoType: "osmosis/gamm/exit-swap-share-amount-in",
    toAmino: ({
      sender,
      poolId,
      tokenOutDenom,
      shareInAmount,
      tokenOutMinAmount
    }) => {
      return {
        sender,
        poolId: poolId.toString(),
        tokenOutDenom,
        shareInAmount,
        tokenOutMinAmount
      };
    },
    fromAmino: ({
      sender,
      poolId,
      tokenOutDenom,
      shareInAmount,
      tokenOutMinAmount
    }) => {
      return {
        sender,
        poolId: Long.fromString(poolId),
        tokenOutDenom,
        shareInAmount,
        tokenOutMinAmount
      };
    }
  }
};