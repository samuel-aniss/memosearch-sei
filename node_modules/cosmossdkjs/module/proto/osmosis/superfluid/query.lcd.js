import { LCDClient } from "@osmonauts/lcd";
import { setPaginationParams } from "@osmonauts/helpers";
export class LCDQueryClient extends LCDClient {
  constructor({
    restEndpoint
  }) {
    super({
      restEndpoint
    });
  }
  /* Params returns the total set of minting parameters. */


  async params(_params = {}) {
    const endpoint = `osmosis/superfluid/v1beta1/params`;
    return await this.request(endpoint);
  }
  /* Returns superfluid asset type */


  async assetType(params) {
    const options = {
      params: {}
    };

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/asset_type`;
    return await this.request(endpoint, options);
  }
  /* Returns all superfluid asset types */


  async allAssets(_params = {}) {
    const endpoint = `osmosis/superfluid/v1beta1/all_assets`;
    return await this.request(endpoint);
  }
  /* Returns superfluid asset Multiplier */


  async assetMultiplier(params) {
    const options = {
      params: {}
    };

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/asset_multiplier`;
    return await this.request(endpoint, options);
  }
  /* Returns all superfluid intermediary account */


  async allIntermediaryAccounts(params = {
    pagination: undefined
  }) {
    const options = {
      params: {}
    };

    if (typeof params?.pagination !== "undefined") {
      setPaginationParams(options, params.pagination);
    }

    const endpoint = `osmosis/superfluid/v1beta1/all_intermediary_accounts`;
    return await this.request(endpoint, options);
  }
  /* Returns intermediary account connected to a superfluid staked lock by id */


  async connectedIntermediaryAccount(params) {
    const options = {
      params: {}
    };

    if (typeof params?.lockId !== "undefined") {
      options.params.lock_id = params.lockId;
    }

    const endpoint = `osmosis/superfluid/v1beta1/connected_intermediary_account/${params.lockId}`;
    return await this.request(endpoint, options);
  }
  /* Returns the total amount of osmo superfluidly staked
  response denominated in uosmo */


  async totalSuperfluidDelegations(_params = {}) {
    const endpoint = `osmosis/superfluid/v1beta1/all_superfluid_delegations`;
    return await this.request(endpoint);
  }
  /* Returns the coins superfluid delegated for a delegator, validator, denom
  triplet */


  async superfluidDelegationAmount(params) {
    const options = {
      params: {}
    };

    if (typeof params?.delegatorAddress !== "undefined") {
      options.params.delegator_address = params.delegatorAddress;
    }

    if (typeof params?.validatorAddress !== "undefined") {
      options.params.validator_address = params.validatorAddress;
    }

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/superfluid_delegation_amount`;
    return await this.request(endpoint, options);
  }
  /* Returns all the superfluid poistions for a specific delegator */


  async superfluidDelegationsByDelegator(params) {
    const options = {
      params: {}
    };

    if (typeof params?.delegatorAddress !== "undefined") {
      options.params.delegator_address = params.delegatorAddress;
    }

    const endpoint = `osmosis/superfluid/v1beta1/superfluid_delegations/${params.delegatorAddress}`;
    return await this.request(endpoint, options);
  }
  /* SuperfluidUndelegationsByDelegator */


  async superfluidUndelegationsByDelegator(params) {
    const options = {
      params: {}
    };

    if (typeof params?.delegatorAddress !== "undefined") {
      options.params.delegator_address = params.delegatorAddress;
    }

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/superfluid_undelegations_by_delegator/${params.delegatorAddress}`;
    return await this.request(endpoint, options);
  }
  /* Returns all the superfluid positions of a specific denom delegated to one
  validator */


  async superfluidDelegationsByValidatorDenom(params) {
    const options = {
      params: {}
    };

    if (typeof params?.validatorAddress !== "undefined") {
      options.params.validator_address = params.validatorAddress;
    }

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/superfluid_delegations_by_validator_denom`;
    return await this.request(endpoint, options);
  }
  /* Returns the amount of a specific denom delegated to a specific validator
  This is labeled an estimate, because the way it calculates the amount can
  lead rounding errors from the true delegated amount */


  async estimateSuperfluidDelegatedAmountByValidatorDenom(params) {
    const options = {
      params: {}
    };

    if (typeof params?.validatorAddress !== "undefined") {
      options.params.validator_address = params.validatorAddress;
    }

    if (typeof params?.denom !== "undefined") {
      options.params.denom = params.denom;
    }

    const endpoint = `osmosis/superfluid/v1beta1/estimate_superfluid_delegation_amount_by_validator_denom`;
    return await this.request(endpoint, options);
  }

}