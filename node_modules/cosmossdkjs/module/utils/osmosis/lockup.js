import { osmosis } from "../../proto"; // Supported query interfaces - types/proto/osmosis/lockup/query.rpc.query.d.ts
// Supported transaction interfaces - types/proto/osmosis/lockup/tx.rpc.msg.d.ts
//---------------------------------------------
// OSMOSIS::LOCKUP MODULE - QUERY HELPERS
// --------------------------------------------

export async function query_osmosis_lockup_moduleBalance(client) {
  let response = await client.query.osmosis.lockup.v1.moduleBalance(osmosis.lockup.ModuleBalanceRequest.fromPartial({}));
  return response;
}
export async function query_osmosis_lockup_moduleLockedAmount(client) {
  let response = await client.query.osmosis.lockup.v1.moduleLockedAmount(osmosis.lockup.ModuleLockedAmountRequest.fromPartial({}));
  return response;
}
export async function query_osmosis_lockup_accountUnlockableCoins(client, owner) {
  let response = await client.query.osmosis.lockup.v1.accountUnlockableCoins(osmosis.lockup.AccountUnlockableCoinsRequest.fromPartial({
    owner
  }));
  return response;
}
export async function query_osmosis_lockup_accountUnlockingCoins(client, owner) {
  let response = await client.query.osmosis.lockup.v1.accountUnlockingCoins(osmosis.lockup.AccountUnlockingCoinsRequest.fromPartial({
    owner
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedCoins(client, owner) {
  let response = await client.query.osmosis.lockup.v1.accountLockedCoins(osmosis.lockup.AccountLockedCoinsRequest.fromPartial({
    owner
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedPastTime(client, owner, timestamp) {
  let response = await client.query.osmosis.lockup.v1.accountLockedPastTime(osmosis.lockup.AccountLockedPastTimeRequest.fromPartial({
    owner,
    timestamp
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedPastTimeNotUnlockingOnly(client, owner, timestamp) {
  let response = await client.query.osmosis.lockup.v1.accountLockedPastTimeNotUnlockingOnly(osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyRequest.fromPartial({
    owner,
    timestamp
  }));
  return response;
}
export async function query_osmosis_lockup_accountUnlockedBeforeTime(client, owner, timestamp) {
  let response = await client.query.osmosis.lockup.v1.accountUnlockedBeforeTime(osmosis.lockup.AccountUnlockedBeforeTimeRequest.fromPartial({
    owner,
    timestamp
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedPastTimeDenom(client, owner, timestamp, denom) {
  let response = await client.query.osmosis.lockup.v1.accountLockedPastTimeDenom(osmosis.lockup.AccountLockedPastTimeDenomRequest.fromPartial({
    owner,
    timestamp,
    denom
  }));
  return response;
}
export async function query_osmosis_lockup_lockedDenom(client, denom, duration) {
  let response = await client.query.osmosis.lockup.v1.lockedDenom(osmosis.lockup.LockedDenomRequest.fromPartial({
    denom,
    duration
  }));
  return response;
}
export async function query_osmosis_lockup_syntheticLockupsByLockupID(client, lockId) {
  let response = await client.query.osmosis.lockup.v1.syntheticLockupsByLockupID(osmosis.lockup.SyntheticLockupsByLockupIDRequest.fromPartial({
    lockId
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedLongerDuration(client, owner, duration) {
  let response = await client.query.osmosis.lockup.v1.accountLockedLongerDuration(osmosis.lockup.AccountLockedLongerDurationRequest.fromPartial({
    owner,
    duration
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedDuration(client, owner, duration) {
  let response = await client.query.osmosis.lockup.v1.accountLockedDuration(osmosis.lockup.AccountLockedDurationRequest.fromPartial({
    owner,
    duration
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedLongerDurationNotUnlockingOnly(client, owner, duration) {
  let response = await client.query.osmosis.lockup.v1.accountLockedLongerDurationNotUnlockingOnly(osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyRequest.fromPartial({
    owner,
    duration
  }));
  return response;
}
export async function query_osmosis_lockup_accountLockedLongerDurationDenom(client, owner, duration, denom) {
  let response = await client.query.osmosis.lockup.v1.accountLockedLongerDurationDenom(osmosis.lockup.AccountLockedLongerDurationDenomRequest.fromPartial({
    owner,
    duration,
    denom
  }));
  return response;
} //---------------------------------------------
// OSMOSIS::LOCKUP MODULE - QUERY HELPERS
// --------------------------------------------
//MsgLockTokens

export async function execute_osmosis_lockup_lockTokens(owner, duration, coins) {
  let msg = osmosis.lockup.MsgLockTokens.fromPartial({
    owner,
    duration,
    coins
  });
  return msg;
} //MsgBeginUnlockingAll

export async function execute_osmosis_lockup_beginUnlockingAll(owner) {
  let msg = osmosis.lockup.MsgBeginUnlockingAll.fromPartial({
    owner
  });
  return msg;
} //MsgBeginUnlocking

export async function execute_osmosis_lockup_beginUnlocking(owner, ID, coins) {
  let msg = osmosis.lockup.MsgBeginUnlocking.fromPartial({
    owner,
    ID,
    coins
  });
  return msg;
} //MsgExtendLockup

export async function execute_osmosis_lockup_extendLockup(owner, ID) {
  let msg = osmosis.lockup.MsgExtendLockup.fromPartial({
    owner,
    ID
  });
  return msg;
}