import { cosmos, osmosis } from "../../proto"; // Supported query interfaces - types/proto/osmosis/incentives/query.rpc.query.d.ts
// Supported transaction interfaces - types/proto/osmosis/incentives/tx.rpc.msg.d.ts
//---------------------------------------------
// OSMOSIS::INCENTIVES MODULE - QUERY HELPERS
// --------------------------------------------

export async function query_osmosis_incentives_moduleToDistributeCoins(client) {
  console.log(osmosis.incentives);
  let response = await client.query.osmosis.incentives.v1.moduleToDistributeCoins(osmosis.incentives.ModuleToDistributeCoinsRequest.fromPartial({}));
  return response;
}
export async function query_osmosis_incentives_moduleDistributedCoins(client) {
  let response = await client.query.osmosis.incentives.v1.moduleDistributedCoins(osmosis.incentives.ModuleDistributedCoinsRequest.fromPartial({}));
  return response;
}
export async function query_osmosis_incentives_gaugeByID(client, id) {
  let response = await client.query.osmosis.incentives.v1.gaugeByID(osmosis.incentives.GaugeByIDRequest.fromPartial({
    id: id
  }));
  return response;
}
export async function query_osmosis_incentives_gauges(client, offset, limit) {
  let response = await client.query.osmosis.incentives.v1.gauges(osmosis.incentives.GaugesRequest.fromPartial({
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_osmosis_incentives_activeGauges(client, offset, limit) {
  let response = await client.query.osmosis.incentives.v1.activeGauges(osmosis.incentives.ActiveGaugesRequest.fromPartial({
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_osmosis_incentives_activeGaugesPerDenom(client, denom, offset, limit) {
  let response = await client.query.osmosis.incentives.v1.activeGaugesPerDenom(osmosis.incentives.ActiveGaugesPerDenomRequest.fromPartial({
    denom: denom,
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_osmosis_incentives_upcomingGauges(client, offset, limit) {
  let response = await client.query.osmosis.incentives.v1.upcomingGauges(osmosis.incentives.UpcomingGaugesRequest.fromPartial({
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_osmosis_incentives_upcomingGaugesPerDenom(client, denom, offset, limit) {
  let response = await client.query.osmosis.incentives.v1.upcomingGaugesPerDenom(osmosis.incentives.UpcomingGaugesPerDenomRequest.fromPartial({
    denom: denom,
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_osmosis_incentives_rewardsEst(client, owner, lockIds, endEpoch) {
  let response = await client.query.osmosis.incentives.v1.rewardsEst(osmosis.incentives.RewardsEstRequest.fromPartial({
    owner: owner,
    lockIds: lockIds,
    endEpoch: endEpoch
  }));
  return response;
}
export async function query_osmosis_incentives_lockableDurations(client) {
  let response = await client.query.osmosis.incentives.v1.lockableDurations(osmosis.incentives.QueryLockableDurationsRequest.fromPartial({}));
  return response;
} //---------------------------------------------
// OSMOSIS::INCENTIVES MODULE - TRANSACTION HELPERS
// --------------------------------------------
//MsgCreateGauge

export async function execute_osmosis_incentives_create_gauge(isPerpetual, owner, distributeTo, coins, startTime, numEpochsPaidOver) {
  let msg = osmosis.incentives.MsgCreateGauge.fromPartial({
    isPerpetual,
    owner,
    distributeTo,
    coins,
    startTime,
    numEpochsPaidOver
  });
  return msg;
} //MsgAddToGauge

export async function execute_osmosis_incentives_add_to_gauge(owner, gaugeId, rewards) {
  let msg = osmosis.incentives.MsgAddToGauge.fromPartial({
    owner,
    gaugeId,
    rewards
  });
  return msg;
}