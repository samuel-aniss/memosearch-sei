import { cosmos, ibc } from "../../../proto"; // Supported query interfaces - types/proto/ibc/core/channel/v1/query.rpc.query.d.ts
//---------------------------------------------
// IBC::CHANNEL MODULE - QUERY HELPERS
// --------------------------------------------

export async function query_ibc_core_channel_channel(client, portId, channelId) {
  let response = await client.query.ibc.core.channel.v1.channel(ibc.core.channel.v1.QueryChannelRequest.fromPartial({
    portId,
    channelId
  }));
  return response;
}
export async function query_ibc_core_channel_channels(client, offset, limit) {
  let response = await client.query.ibc.core.channel.v1.channels(ibc.core.channel.v1.QueryChannelsRequest.fromPartial({
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_ibc_core_channel_connectionChannels(client, connection, offset, limit) {
  let response = await client.query.ibc.core.channel.v1.connectionChannels(ibc.core.channel.v1.QueryConnectionChannelsRequest.fromPartial({
    connection,
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_ibc_core_channel_channelClientState(client, portId, channelId) {
  let response = await client.query.ibc.core.channel.v1.channelClientState(ibc.core.channel.v1.QueryChannelClientStateRequest.fromPartial({
    portId,
    channelId
  }));
  return response;
}
export async function query_ibc_core_channel_channelConsensusState(client, portId, channelId, revisionNumber, revisionHeight) {
  let response = await client.query.ibc.core.channel.v1.channelConsensusState(ibc.core.channel.v1.QueryChannelConsensusStateRequest.fromPartial({
    portId,
    channelId,
    revisionNumber,
    revisionHeight
  }));
  return response;
}
export async function query_ibc_core_channel_packetCommitment(client, portId, channelId, sequence) {
  let response = await client.query.ibc.core.channel.v1.packetCommitment(ibc.core.channel.v1.QueryPacketCommitmentRequest.fromPartial({
    portId,
    channelId,
    sequence
  }));
  return response;
}
export async function query_ibc_core_channel_packetCommitments(client, portId, channelId, offset, limit) {
  let response = await client.query.ibc.core.channel.v1.packetCommitments(ibc.core.channel.v1.QueryPacketCommitmentsRequest.fromPartial({
    portId,
    channelId,
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_ibc_core_channel_packetReceipt(client, portId, channelId, sequence) {
  let response = await client.query.ibc.core.channel.v1.packetReceipt(ibc.core.channel.v1.QueryPacketReceiptRequest.fromPartial({
    portId,
    channelId,
    sequence
  }));
  return response;
}
export async function query_ibc_core_channel_packetAcknowledgement(client, portId, channelId, sequence) {
  let response = await client.query.ibc.core.channel.v1.packetAcknowledgement(ibc.core.channel.v1.QueryPacketAcknowledgementRequest.fromPartial({
    portId,
    channelId,
    sequence
  }));
  return response;
}
export async function query_ibc_core_channel_packetAcknowledgements(client, portId, channelId, packetCommitmentSequences, offset, limit) {
  let response = await client.query.ibc.core.channel.v1.packetAcknowledgements(ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.fromPartial({
    portId,
    channelId,
    packetCommitmentSequences,
    pagination: cosmos.base.query.v1beta1.PageRequest.fromPartial({
      offset: offset,
      limit: limit
    })
  }));
  return response;
}
export async function query_ibc_core_channel_unreceivedPackets(client, portId, channelId, packetCommitmentSequences) {
  let response = await client.query.ibc.core.channel.v1.unreceivedPackets(ibc.core.channel.v1.QueryUnreceivedPacketsRequest.fromPartial({
    portId,
    channelId,
    packetCommitmentSequences
  }));
  return response;
}
export async function query_ibc_core_channel_unreceivedAcks(client, portId, channelId, packetAckSequences) {
  let response = await client.query.ibc.core.channel.v1.unreceivedAcks(ibc.core.channel.v1.QueryUnreceivedAcksRequest.fromPartial({
    portId,
    channelId,
    packetAckSequences
  }));
  return response;
}
export async function query_ibc_core_channel_nextSequenceReceive(client, portId, channelId) {
  let response = await client.query.ibc.core.channel.v1.nextSequenceReceive(ibc.core.channel.v1.QueryNextSequenceReceiveRequest.fromPartial({
    portId,
    channelId
  }));
  return response;
} // Supported transaction interfaces - types/proto/ibc/core/channel/v1/tx.rpc.msg.d.ts
//---------------------------------------------
// IBC::CHANNEL MODULE - TRANSACTION HELPERS
// --------------------------------------------
//MsgChannelOpenInit

export async function execute_ibc_core_channel_channelOpenInit(portId, channel, signer) {
  let msg = ibc.core.channel.v1.MsgChannelOpenInit.fromPartial({
    portId,
    channel,
    signer
  });
  return msg;
} //MsgChannelOpenTry

export async function execute_ibc_core_channel_channelOpenTry(portId, previousChannelId, channel, counterpartyVersion, proofInit, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgChannelOpenTry.fromPartial({
    portId,
    previousChannelId,
    channel,
    counterpartyVersion,
    proofInit,
    proofHeight,
    signer
  });
  return msg;
} //MsgChannelOpenAck

export async function execute_ibc_core_channel_channelOpenAck(portId, channelId, counterpartyChannelId, counterpartyVersion, proofTry, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgChannelOpenAck.fromPartial({
    portId,
    counterpartyChannelId,
    channelId,
    counterpartyVersion,
    proofTry,
    proofHeight,
    signer
  });
  return msg;
} //MsgChannelOpenConfirm

export async function execute_ibc_core_channel_channelOpenConfirm(portId, channelId, proofAck, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgChannelOpenConfirm.fromPartial({
    portId,
    channelId,
    proofAck,
    proofHeight,
    signer
  });
  return msg;
} //MsgChannelCloseInit

export async function execute_ibc_core_channel_channelCloseInit(portId, channelId, signer) {
  let msg = ibc.core.channel.v1.MsgChannelCloseInit.fromPartial({
    portId,
    channelId,
    signer
  });
  return msg;
} //MsgChannelCloseConfirm

export async function execute_ibc_core_channel_channelCloseConfirm(portId, channelId, proofInit, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgChannelCloseConfirm.fromPartial({
    portId,
    channelId,
    signer,
    proofInit,
    proofHeight
  });
  return msg;
} //MsgRecvPacket

export async function execute_ibc_core_channel_recvPacket(packet, proofCommitment, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgRecvPacket.fromPartial({
    packet,
    proofCommitment,
    proofHeight,
    signer
  });
  return msg;
} //MsgTimeout

export async function execute_ibc_core_channel_timeout(packet, proofUnreceived, proofHeight, nextSequenceRecv, signer) {
  let msg = ibc.core.channel.v1.MsgTimeout.fromPartial({
    packet,
    proofUnreceived,
    proofHeight,
    nextSequenceRecv,
    signer
  });
  return msg;
} //MsgTimeoutOnClose

export async function execute_ibc_core_channel_timeoutOnClose(packet, proofUnreceived, proofClose, proofHeight, nextSequenceRecv, signer) {
  let msg = ibc.core.channel.v1.MsgTimeoutOnClose.fromPartial({
    packet,
    proofUnreceived,
    proofHeight,
    nextSequenceRecv,
    signer
  });
  return msg;
} //MsgAcknowledgement

export async function execute_ibc_core_channel_acknowledgement(packet, acknowledgement, proofAcked, proofHeight, signer) {
  let msg = ibc.core.channel.v1.MsgAcknowledgement.fromPartial({
    packet,
    acknowledgement,
    proofHeight,
    proofAcked,
    signer
  });
  return msg;
}