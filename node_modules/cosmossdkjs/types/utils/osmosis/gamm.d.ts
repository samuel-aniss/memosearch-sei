import { Coin } from "@cosmjs/stargate";
import { CosmosChainClient } from "../../clients";
export declare function query_osmosis_gamm_pools(client: CosmosChainClient, offset?: number, limit?: number): Promise<any>;
export declare function query_osmosis_gamm_numpools(client: CosmosChainClient): Promise<any>;
export declare function query_osmosis_gamm_totalLiquidity(client: CosmosChainClient): Promise<any>;
export declare function query_osmosis_gamm_pool(client: CosmosChainClient, poolId: number): Promise<any>;
export declare function query_osmosis_gamm_poolParams(client: CosmosChainClient, poolId: number): Promise<any>;
export declare function query_osmosis_gamm_totalPoolLiquidity(client: CosmosChainClient, poolId: number): Promise<any>;
export declare function query_osmosis_gamm_totalShares(client: CosmosChainClient, poolId: number): Promise<any>;
export declare function query_osmosis_gamm_spotPrice(client: CosmosChainClient, poolId: number, baseAssetDenom: string, quoteAssetDenom: string): Promise<any>;
export declare function query_osmosis_gamm_estimateSwapExactAmountIn(client: CosmosChainClient, sender: string, poolId: number, tokenIn: string, routes: any): Promise<any>;
export declare function query_osmosis_gamm_estimateSwapExactAmountOut(client: CosmosChainClient, sender: string, poolId: number, tokenOut: string, routes: any): Promise<any>;
export declare function execute_osmosis_gamm_JoinPool(client: CosmosChainClient, sender: string, poolId: number, shareOutAmount: string, tokenInMaxs: any): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgJoinPool>;
export declare function execute_osmosis_gamm_ExitPool(client: CosmosChainClient, sender: string, poolId: number, shareInAmount: string, tokenOutMins: any): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgExitPool>;
export declare function execute_osmosis_gamm_SwapExactAmountIn(client: CosmosChainClient, sender: string, routes: any, tokenIn: Coin, tokenOutMinAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgSwapExactAmountIn>;
export declare function execute_osmosis_gamm_SwapExactAmountOut(sender: string, routes: any, tokenOut: Coin, tokenInMaxAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgSwapExactAmountOut>;
export declare function execute_osmosis_gamm_joinSwapExternAmountIn(client: CosmosChainClient, sender: string, poolId: number, tokenIn: Coin, shareOutMinAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgJoinSwapExternAmountIn>;
export declare function execute_osmosis_gamm_joinSwapShareAmountOut(client: CosmosChainClient, sender: string, poolId: number, tokenInDenom: string, tokenInMaxAmount: string, shareOutAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgJoinSwapShareAmountOut>;
export declare function execute_osmosis_gamm_exitSwapExternAmountOut(client: CosmosChainClient, sender: string, poolId: number, tokenOut: Coin, shareInMaxAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgExitSwapExternAmountOut>;
export declare function execute_osmosis_gamm_exitSwapShareAmountIn(client: CosmosChainClient, sender: string, poolId: any, tokenOutDenom: string, shareInAmount: string, tokenOutMinAmount: string): Promise<import("../../proto/osmosis/gamm/v1beta1/tx").MsgExitSwapShareAmountIn>;
