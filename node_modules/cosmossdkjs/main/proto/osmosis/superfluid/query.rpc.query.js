"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryClientImpl = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _query = require("./query");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.params = this.params.bind(this);
    this.assetType = this.assetType.bind(this);
    this.allAssets = this.allAssets.bind(this);
    this.assetMultiplier = this.assetMultiplier.bind(this);
    this.allIntermediaryAccounts = this.allIntermediaryAccounts.bind(this);
    this.connectedIntermediaryAccount = this.connectedIntermediaryAccount.bind(this);
    this.totalSuperfluidDelegations = this.totalSuperfluidDelegations.bind(this);
    this.superfluidDelegationAmount = this.superfluidDelegationAmount.bind(this);
    this.superfluidDelegationsByDelegator = this.superfluidDelegationsByDelegator.bind(this);
    this.superfluidUndelegationsByDelegator = this.superfluidUndelegationsByDelegator.bind(this);
    this.superfluidDelegationsByValidatorDenom = this.superfluidDelegationsByValidatorDenom.bind(this);
    this.estimateSuperfluidDelegatedAmountByValidatorDenom = this.estimateSuperfluidDelegatedAmountByValidatorDenom.bind(this);
  }

  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "params",
    value: function params(request) {
      var data = _query.QueryParamsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "Params", data);
      return promise.then(function (data) {
        return _query.QueryParamsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "assetType",
    value: function assetType(request) {
      var data = _query.AssetTypeRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "AssetType", data);
      return promise.then(function (data) {
        return _query.AssetTypeResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "allAssets",
    value: function allAssets(request) {
      var data = _query.AllAssetsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "AllAssets", data);
      return promise.then(function (data) {
        return _query.AllAssetsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "assetMultiplier",
    value: function assetMultiplier(request) {
      var data = _query.AssetMultiplierRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "AssetMultiplier", data);
      return promise.then(function (data) {
        return _query.AssetMultiplierResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "allIntermediaryAccounts",
    value: function allIntermediaryAccounts(request) {
      var data = _query.AllIntermediaryAccountsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "AllIntermediaryAccounts", data);
      return promise.then(function (data) {
        return _query.AllIntermediaryAccountsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "connectedIntermediaryAccount",
    value: function connectedIntermediaryAccount(request) {
      var data = _query.ConnectedIntermediaryAccountRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "ConnectedIntermediaryAccount", data);
      return promise.then(function (data) {
        return _query.ConnectedIntermediaryAccountResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "totalSuperfluidDelegations",
    value: function totalSuperfluidDelegations(request) {
      var data = _query.TotalSuperfluidDelegationsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "TotalSuperfluidDelegations", data);
      return promise.then(function (data) {
        return _query.TotalSuperfluidDelegationsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "superfluidDelegationAmount",
    value: function superfluidDelegationAmount(request) {
      var data = _query.SuperfluidDelegationAmountRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "SuperfluidDelegationAmount", data);
      return promise.then(function (data) {
        return _query.SuperfluidDelegationAmountResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "superfluidDelegationsByDelegator",
    value: function superfluidDelegationsByDelegator(request) {
      var data = _query.SuperfluidDelegationsByDelegatorRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "SuperfluidDelegationsByDelegator", data);
      return promise.then(function (data) {
        return _query.SuperfluidDelegationsByDelegatorResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "superfluidUndelegationsByDelegator",
    value: function superfluidUndelegationsByDelegator(request) {
      var data = _query.SuperfluidUndelegationsByDelegatorRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "SuperfluidUndelegationsByDelegator", data);
      return promise.then(function (data) {
        return _query.SuperfluidUndelegationsByDelegatorResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "superfluidDelegationsByValidatorDenom",
    value: function superfluidDelegationsByValidatorDenom(request) {
      var data = _query.SuperfluidDelegationsByValidatorDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "SuperfluidDelegationsByValidatorDenom", data);
      return promise.then(function (data) {
        return _query.SuperfluidDelegationsByValidatorDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "estimateSuperfluidDelegatedAmountByValidatorDenom",
    value: function estimateSuperfluidDelegatedAmountByValidatorDenom(request) {
      var data = _query.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.superfluid.Query", "EstimateSuperfluidDelegatedAmountByValidatorDenom", data);
      return promise.then(function (data) {
        return _query.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();

exports.QueryClientImpl = QueryClientImpl;