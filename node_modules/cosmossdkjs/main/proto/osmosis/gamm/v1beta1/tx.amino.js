"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AminoConverter = void 0;

var _helpers = require("@osmonauts/helpers");

var AminoConverter = {
  "/osmosis.gamm.v1beta1.MsgJoinPool": {
    aminoType: "osmosis/gamm/join-pool",
    toAmino: function toAmino(_ref) {
      var sender = _ref.sender,
          poolId = _ref.poolId,
          shareOutAmount = _ref.shareOutAmount,
          tokenInMaxs = _ref.tokenInMaxs;
      return {
        sender: sender,
        poolId: poolId.toString(),
        shareOutAmount: shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        })
      };
    },
    fromAmino: function fromAmino(_ref2) {
      var sender = _ref2.sender,
          poolId = _ref2.poolId,
          shareOutAmount = _ref2.shareOutAmount,
          tokenInMaxs = _ref2.tokenInMaxs;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        shareOutAmount: shareOutAmount,
        tokenInMaxs: tokenInMaxs.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        })
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitPool": {
    aminoType: "osmosis/gamm/exit-pool",
    toAmino: function toAmino(_ref3) {
      var sender = _ref3.sender,
          poolId = _ref3.poolId,
          shareInAmount = _ref3.shareInAmount,
          tokenOutMins = _ref3.tokenOutMins;
      return {
        sender: sender,
        poolId: poolId.toString(),
        shareInAmount: shareInAmount,
        tokenOutMins: tokenOutMins.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        })
      };
    },
    fromAmino: function fromAmino(_ref4) {
      var sender = _ref4.sender,
          poolId = _ref4.poolId,
          shareInAmount = _ref4.shareInAmount,
          tokenOutMins = _ref4.tokenOutMins;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        shareInAmount: shareInAmount,
        tokenOutMins: tokenOutMins.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        })
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn": {
    aminoType: "osmosis/gamm/swap-exact-amount-in",
    toAmino: function toAmino(_ref5) {
      var sender = _ref5.sender,
          routes = _ref5.routes,
          tokenIn = _ref5.tokenIn,
          tokenOutMinAmount = _ref5.tokenOutMinAmount;
      return {
        sender: sender,
        routes: routes.map(function (el0) {
          return {
            poolId: el0.poolId.toString(),
            tokenOutDenom: el0.tokenOutDenom
          };
        }),
        tokenIn: {
          denom: tokenIn.denom,
          amount: _helpers.Long.fromNumber(tokenIn.amount).toString()
        },
        tokenOutMinAmount: tokenOutMinAmount
      };
    },
    fromAmino: function fromAmino(_ref6) {
      var sender = _ref6.sender,
          routes = _ref6.routes,
          tokenIn = _ref6.tokenIn,
          tokenOutMinAmount = _ref6.tokenOutMinAmount;
      return {
        sender: sender,
        routes: routes.map(function (el0) {
          return {
            poolId: _helpers.Long.fromString(el0.poolId),
            tokenOutDenom: el0.tokenOutDenom
          };
        }),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        tokenOutMinAmount: tokenOutMinAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut": {
    aminoType: "osmosis/gamm/swap-exact-amount-out",
    toAmino: function toAmino(_ref7) {
      var sender = _ref7.sender,
          routes = _ref7.routes,
          tokenInMaxAmount = _ref7.tokenInMaxAmount,
          tokenOut = _ref7.tokenOut;
      return {
        sender: sender,
        routes: routes.map(function (el0) {
          return {
            poolId: el0.poolId.toString(),
            tokenInDenom: el0.tokenInDenom
          };
        }),
        tokenInMaxAmount: tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: _helpers.Long.fromNumber(tokenOut.amount).toString()
        }
      };
    },
    fromAmino: function fromAmino(_ref8) {
      var sender = _ref8.sender,
          routes = _ref8.routes,
          tokenInMaxAmount = _ref8.tokenInMaxAmount,
          tokenOut = _ref8.tokenOut;
      return {
        sender: sender,
        routes: routes.map(function (el0) {
          return {
            poolId: _helpers.Long.fromString(el0.poolId),
            tokenInDenom: el0.tokenInDenom
          };
        }),
        tokenInMaxAmount: tokenInMaxAmount,
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        }
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn": {
    aminoType: "osmosis/gamm/join-swap-extern-amount-in",
    toAmino: function toAmino(_ref9) {
      var sender = _ref9.sender,
          poolId = _ref9.poolId,
          tokenIn = _ref9.tokenIn,
          shareOutMinAmount = _ref9.shareOutMinAmount;
      return {
        sender: sender,
        poolId: poolId.toString(),
        tokenIn: {
          denom: tokenIn.denom,
          amount: _helpers.Long.fromNumber(tokenIn.amount).toString()
        },
        shareOutMinAmount: shareOutMinAmount
      };
    },
    fromAmino: function fromAmino(_ref10) {
      var sender = _ref10.sender,
          poolId = _ref10.poolId,
          tokenIn = _ref10.tokenIn,
          shareOutMinAmount = _ref10.shareOutMinAmount;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        tokenIn: {
          denom: tokenIn.denom,
          amount: tokenIn.amount
        },
        shareOutMinAmount: shareOutMinAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut": {
    aminoType: "osmosis/gamm/join-swap-share-amount-out",
    toAmino: function toAmino(_ref11) {
      var sender = _ref11.sender,
          poolId = _ref11.poolId,
          tokenInDenom = _ref11.tokenInDenom,
          shareOutAmount = _ref11.shareOutAmount,
          tokenInMaxAmount = _ref11.tokenInMaxAmount;
      return {
        sender: sender,
        poolId: poolId.toString(),
        tokenInDenom: tokenInDenom,
        shareOutAmount: shareOutAmount,
        tokenInMaxAmount: tokenInMaxAmount
      };
    },
    fromAmino: function fromAmino(_ref12) {
      var sender = _ref12.sender,
          poolId = _ref12.poolId,
          tokenInDenom = _ref12.tokenInDenom,
          shareOutAmount = _ref12.shareOutAmount,
          tokenInMaxAmount = _ref12.tokenInMaxAmount;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        tokenInDenom: tokenInDenom,
        shareOutAmount: shareOutAmount,
        tokenInMaxAmount: tokenInMaxAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut": {
    aminoType: "osmosis/gamm/exit-swap-extern-amount-out",
    toAmino: function toAmino(_ref13) {
      var sender = _ref13.sender,
          poolId = _ref13.poolId,
          tokenOut = _ref13.tokenOut,
          shareInMaxAmount = _ref13.shareInMaxAmount;
      return {
        sender: sender,
        poolId: poolId.toString(),
        tokenOut: {
          denom: tokenOut.denom,
          amount: _helpers.Long.fromNumber(tokenOut.amount).toString()
        },
        shareInMaxAmount: shareInMaxAmount
      };
    },
    fromAmino: function fromAmino(_ref14) {
      var sender = _ref14.sender,
          poolId = _ref14.poolId,
          tokenOut = _ref14.tokenOut,
          shareInMaxAmount = _ref14.shareInMaxAmount;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        tokenOut: {
          denom: tokenOut.denom,
          amount: tokenOut.amount
        },
        shareInMaxAmount: shareInMaxAmount
      };
    }
  },
  "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn": {
    aminoType: "osmosis/gamm/exit-swap-share-amount-in",
    toAmino: function toAmino(_ref15) {
      var sender = _ref15.sender,
          poolId = _ref15.poolId,
          tokenOutDenom = _ref15.tokenOutDenom,
          shareInAmount = _ref15.shareInAmount,
          tokenOutMinAmount = _ref15.tokenOutMinAmount;
      return {
        sender: sender,
        poolId: poolId.toString(),
        tokenOutDenom: tokenOutDenom,
        shareInAmount: shareInAmount,
        tokenOutMinAmount: tokenOutMinAmount
      };
    },
    fromAmino: function fromAmino(_ref16) {
      var sender = _ref16.sender,
          poolId = _ref16.poolId,
          tokenOutDenom = _ref16.tokenOutDenom,
          shareInAmount = _ref16.shareInAmount,
          tokenOutMinAmount = _ref16.tokenOutMinAmount;
      return {
        sender: sender,
        poolId: _helpers.Long.fromString(poolId),
        tokenOutDenom: tokenOutDenom,
        shareInAmount: shareInAmount,
        tokenOutMinAmount: tokenOutMinAmount
      };
    }
  }
};
exports.AminoConverter = AminoConverter;