"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AminoConverter = void 0;

var _helpers = require("@osmonauts/helpers");

var AminoConverter = {
  "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgCreateBalancerPool": {
    aminoType: "osmosis/gamm/poolmodels/balancer/create-balancer-pool",
    toAmino: function toAmino(_ref) {
      var sender = _ref.sender,
          poolParams = _ref.poolParams,
          poolAssets = _ref.poolAssets,
          futurePoolGovernor = _ref.futurePoolGovernor;
      return {
        sender: sender,
        poolParams: {
          swapFee: poolParams.swapFee,
          exitFee: poolParams.exitFee,
          smoothWeightChangeParams: {
            start_time: poolParams.smoothWeightChangeParams.startTime,
            duration: (poolParams.smoothWeightChangeParams.duration * 1000000000).toString(),
            initialPoolWeights: poolParams.smoothWeightChangeParams.initialPoolWeights.map(function (el0) {
              return {
                token: {
                  denom: el0.token.denom,
                  amount: _helpers.Long.fromNumber(el0.token.amount).toString()
                },
                weight: el0.weight
              };
            }),
            targetPoolWeights: poolParams.smoothWeightChangeParams.targetPoolWeights.map(function (el0) {
              return {
                token: {
                  denom: el0.token.denom,
                  amount: _helpers.Long.fromNumber(el0.token.amount).toString()
                },
                weight: el0.weight
              };
            })
          }
        },
        poolAssets: poolAssets.map(function (el0) {
          return {
            token: {
              denom: el0.token.denom,
              amount: _helpers.Long.fromNumber(el0.token.amount).toString()
            },
            weight: el0.weight
          };
        }),
        future_pool_governor: futurePoolGovernor
      };
    },
    fromAmino: function fromAmino(_ref2) {
      var sender = _ref2.sender,
          poolParams = _ref2.poolParams,
          poolAssets = _ref2.poolAssets,
          future_pool_governor = _ref2.future_pool_governor;
      return {
        sender: sender,
        poolParams: {
          swapFee: poolParams.swapFee,
          exitFee: poolParams.exitFee,
          smoothWeightChangeParams: {
            startTime: poolParams.smoothWeightChangeParams.start_time,
            duration: {
              seconds: _helpers.Long.fromNumber(Math.floor(parseInt(poolParams.smoothWeightChangeParams.duration) / 1000000000)),
              nanos: parseInt(poolParams.smoothWeightChangeParams.duration) % 1000000000
            },
            initialPoolWeights: poolParams.smoothWeightChangeParams.initialPoolWeights.map(function (el2) {
              return {
                token: {
                  denom: el2.token.denom,
                  amount: el2.token.amount
                },
                weight: el2.weight
              };
            }),
            targetPoolWeights: poolParams.smoothWeightChangeParams.targetPoolWeights.map(function (el2) {
              return {
                token: {
                  denom: el2.token.denom,
                  amount: el2.token.amount
                },
                weight: el2.weight
              };
            })
          }
        },
        poolAssets: poolAssets.map(function (el0) {
          return {
            token: {
              denom: el0.token.denom,
              amount: el0.token.amount
            },
            weight: el0.weight
          };
        }),
        futurePoolGovernor: future_pool_governor
      };
    }
  }
};
exports.AminoConverter = AminoConverter;