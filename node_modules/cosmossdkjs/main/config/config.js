"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThorchainWalletOptions = exports.ThorchainMainnetConfig = exports.TerraClassicWalletOptions = exports.TerraClassicTestConfig = exports.TerraClassicMainnetConfig = exports.TerraClassicLocalConfig = exports.Terra2WalletOptions = exports.Terra2TestnetConfig = exports.Terra2MainnetConfig = exports.SecretWalletOptions = exports.SecretMainnetConfig = exports.PersistenceWalletOptions = exports.PersistenceTestConfig = exports.PersistenceMainnetConfig = exports.PersistenceLocalConfig = exports.OsmosisWalletOptions = exports.OsmosisTestnetConfig = exports.OsmosisMainnetConfig = exports.OsmosisLocalConfig = exports.KujiraWalletOptions = exports.KujiraMainnetConfig = exports.JunoWalletOptions = exports.JunoMainnetConfig = exports.InjectiveWalletOptions = exports.InjectiveMainnetConfig = exports.FetchWalletOptions = exports.FetchMainnetConfig = exports.EvmosWalletOptions = exports.EvmosMainnetConfig = exports.CosmosWalletOptions = exports.CosmosMainnetConfig = exports.AkashWalletOptions = exports.AkashMainnetConfig = void 0;

var _crypto = require("@cosmjs/crypto");

// https://github.com/cosmos/chain-registry
// -------------------------------
// THORCHAIN NETWORK :: CONFIG
//--------------------------------
var ThorchainMainnetConfig = {
  rpc: "https://rpc.thorchain.info",
  chainId: "thorchain-mainnet-v1",
  gasPrices: {
    urune: 0.01
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.ThorchainMainnetConfig = ThorchainMainnetConfig;
var ThorchainWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/931'/0'/0/0")],
  prefix: "thor"
}; // -------------------------------
// INJECTIVE NETWORK :: CONFIG
//--------------------------------

exports.ThorchainWalletOptions = ThorchainWalletOptions;
var InjectiveMainnetConfig = {
  rpc: "https://injective-rpc.quickapi.com:443",
  chainId: "injective-1",
  gasPrices: {
    inj: 0.0007
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.InjectiveMainnetConfig = InjectiveMainnetConfig;
var InjectiveWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/60'/0'/0/0")],
  prefix: "inj"
}; // -------------------------------
// AKASH NETWORK :: CONFIG
//--------------------------------

exports.InjectiveWalletOptions = InjectiveWalletOptions;
var AkashMainnetConfig = {
  rpc: "https://api.akash.forbole.com:443",
  chainId: "akashnet-2",
  gasPrices: {
    uatom: 0.01
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.AkashMainnetConfig = AkashMainnetConfig;
var AkashWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "uakt"
}; // -------------------------------
// COSMOS HUB NETWORK :: CONFIG
//--------------------------------

exports.AkashWalletOptions = AkashWalletOptions;
var CosmosMainnetConfig = {
  // rpc: "https://rest-juno.whispernode.com",
  rpc: "https://rpc-cosmoshub.blockapsis.com",
  chainId: "cosmoshub-4",
  gasPrices: {
    uatom: 0.01
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.CosmosMainnetConfig = CosmosMainnetConfig;
var CosmosWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "cosmos"
}; // -------------------------------
// SECRET NETWORK :: CONFIG
//--------------------------------

exports.CosmosWalletOptions = CosmosWalletOptions;
var SecretMainnetConfig = {
  // rpc: "https://rest-juno.whispernode.com",
  rpc: "https://rpc.scrt.network",
  chainId: "secret-4",
  gasPrices: {
    uscrt: 0.1
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.SecretMainnetConfig = SecretMainnetConfig;
var SecretWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/529'/0'/0/0")],
  prefix: "secret"
}; // -------------------------------
// FETCH NETWORK :: CONFIG
//--------------------------------

exports.SecretWalletOptions = SecretWalletOptions;
var FetchMainnetConfig = {
  // rpc: "https://rest-juno.whispernode.com",
  rpc: "https://rpc-fetchhub.fetch.ai:443",
  chainId: "fetchhub-4",
  gasPrices: {
    afet: 0.025
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.FetchMainnetConfig = FetchMainnetConfig;
var FetchWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "fetch"
}; // -------------------------------
// JUNO NETWORK :: CONFIG
//--------------------------------

exports.FetchWalletOptions = FetchWalletOptions;
var JunoMainnetConfig = {
  // rpc: "https://rest-juno.whispernode.com",
  rpc: "https://rpc-juno.whispernode.com",
  chainId: "juno-1",
  gasPrices: {
    ujuno: 0.04
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.JunoMainnetConfig = JunoMainnetConfig;
var JunoWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "juno"
}; // -------------------------------
// EVMOS NETWORK :: CONFIG
//--------------------------------

exports.JunoWalletOptions = JunoWalletOptions;
var EvmosMainnetConfig = {
  // rpc: "https://rest-evmos.ecostake.com",
  rpc: "https://rpc-evmos.ecostake.com",
  chainId: "evmos_9001-2",
  gasPrices: {
    aevmos: 0.15
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.EvmosMainnetConfig = EvmosMainnetConfig;
var EvmosWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/60'/0'/0/0")],
  prefix: "evmos"
}; // -------------------------------
// KUJIRA NETWORK :: CONFIG
//--------------------------------

exports.EvmosWalletOptions = EvmosWalletOptions;
var KujiraMainnetConfig = {
  // rpc: "https://rest.kujira.ccvalidators.com:443",
  rpc: "https://lcd-kujira.whispernode.com",
  chainId: "kaiyo-1",
  gasPrices: {
    ukuji: 0.15
  },
  gasAdjustment: "1.5"
}; // export const KujiraTestnetConfig = {
//   // rpc: "https://lcd-test.osmosis.zone/",
//   rpc: "https://rpc-test.osmosis.zone/",
//   chainId: "osmo-test-4",
//   gasPrices: { uluna: 0.15 },
//   gasAdjustment: "1.5",
// };
// wallet options

exports.KujiraMainnetConfig = KujiraMainnetConfig;
var KujiraWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "kujira"
}; // -------------------------------
// OSMOSIS NETWORK :: CONFIG
//--------------------------------

exports.KujiraWalletOptions = KujiraWalletOptions;
var OsmosisMainnetConfig = {
  // rpc: "https://lcd.osmosis.zone/",
  rpc: "https://rpc.osmosis.zone/",
  chainId: "osmosis-1",
  gasPrices: {
    denom: "uosmo",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
};
exports.OsmosisMainnetConfig = OsmosisMainnetConfig;
var OsmosisTestnetConfig = {
  // rpc: "https://lcd-test.osmosis.zone/",
  rpc: "https://rpc-test.osmosis.zone/",
  chainId: "osmo-test-4",
  gasPrices: {
    denom: "uosmo",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
};
exports.OsmosisTestnetConfig = OsmosisTestnetConfig;
var OsmosisLocalConfig = {
  //   const DEFAULT_OSMOSIS_RPC = 'http://localhost:26657';
  // const DEFAULT_OSMOSIS_LCD = 'http://localhost:1337';
  rpc: "http://localhost:26657",
  chainId: "osmosisd",
  gasPrices: {
    denom: "uosmo",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.OsmosisLocalConfig = OsmosisLocalConfig;
var OsmosisWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "osmo"
}; // -------------------------------
// TERRA-2 NETWORK :: CONFIG
//--------------------------------

exports.OsmosisWalletOptions = OsmosisWalletOptions;
var Terra2MainnetConfig = {
  rpc: "https://lcd.terra.dev",
  chainId: "phoenix-1",
  gasPrices: {
    uluna: 0.15
  },
  gasAdjustment: "1.5"
};
exports.Terra2MainnetConfig = Terra2MainnetConfig;
var Terra2TestnetConfig = {
  rpc: "https://lcd.terra.dev",
  chainId: "pisco-1",
  gasPrices: {
    uluna: 0.15
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.Terra2TestnetConfig = Terra2TestnetConfig;
var Terra2WalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/330'/0'/0/0")],
  prefix: "terra"
}; // -------------------------------
// TERRA CLASSIC NETWORK :: CONFIG
//--------------------------------
// const { data: gasPrices } = await Axios.get(
//   'https://fcd.terra.dev/v1/txs/gas_prices'
// );
// config

exports.Terra2WalletOptions = Terra2WalletOptions;
var TerraClassicMainnetConfig = {
  rpc: "https://lcd.terra.dev",
  chainId: "columbus-5",
  gasPrices: {
    uluna: 0.15
  },
  gasAdjustment: "1.5"
};
exports.TerraClassicMainnetConfig = TerraClassicMainnetConfig;
var TerraClassicTestConfig = {
  rpc: "https://bombay-lcd.terra.dev",
  chainId: "bombay-12",
  gasPrices: {
    uluna: 0.15
  },
  gasAdjustment: "1.5"
};
exports.TerraClassicTestConfig = TerraClassicTestConfig;
var TerraClassicLocalConfig = {
  rpc: "http://localhost:1317",
  chainId: "localterra",
  gasPrices: {
    uluna: 0.15
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.TerraClassicLocalConfig = TerraClassicLocalConfig;
var TerraClassicWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/330'/0'/0/0")],
  prefix: "terra"
}; // -------------------------------
// PERSISTENCE NETWORK :: CONFIG
//--------------------------------
// config

exports.TerraClassicWalletOptions = TerraClassicWalletOptions;
var PersistenceMainnetConfig = {
  rpc: "https://rpc.persistence.one:443",
  chainId: "core-1",
  gasPrices: {
    denom: "uxprt",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
};
exports.PersistenceMainnetConfig = PersistenceMainnetConfig;
var PersistenceTestConfig = {
  rpc: "https://rpc.testnet.persistence.one:443",
  chainId: "test-core-1",
  gasPrices: {
    denom: "uxprt",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
};
exports.PersistenceTestConfig = PersistenceTestConfig;
var PersistenceLocalConfig = {
  rpc: "http://localhost:26657",
  chainId: "testing",
  gasPrices: {
    denom: "uxprt",
    amount: "2000000"
  },
  gasAdjustment: "1.5"
}; // wallet options

exports.PersistenceLocalConfig = PersistenceLocalConfig;
var PersistenceWalletOptions = {
  bip39Password: "",
  hdPaths: [(0, _crypto.stringToPath)("m/44'/118'/0'/0/0")],
  prefix: "persistence"
};
exports.PersistenceWalletOptions = PersistenceWalletOptions;