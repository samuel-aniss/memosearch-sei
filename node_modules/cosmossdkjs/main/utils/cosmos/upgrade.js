"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.query_cosmos_upgrade_applied_plan = query_cosmos_upgrade_applied_plan;
exports.query_cosmos_upgrade_current_plan = query_cosmos_upgrade_current_plan;
exports.query_cosmos_upgrade_module_versions = query_cosmos_upgrade_module_versions;
exports.query_cosmos_upgrade_upgraded_consensus_state = query_cosmos_upgrade_upgraded_consensus_state;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _proto = require("../../proto");

// Supported query interfaces - types/proto/cosmos/upgrade/v1beta1/query.rpc.query.d.ts
// Supported transaction interfaces - types/proto/cosmos/upgrade/v1beta1/tx.rpc.msg.d.ts
//---------------------------------------------
// COSMOS::UPGRADE MODULE - QUERY HELPERS
// --------------------------------------------
function query_cosmos_upgrade_current_plan(_x) {
  return _query_cosmos_upgrade_current_plan.apply(this, arguments);
}

function _query_cosmos_upgrade_current_plan() {
  _query_cosmos_upgrade_current_plan = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query.cosmos.upgrage.v1beta1.currentPlan(_proto.cosmos.upgrade.v1beta1.QueryCurrentPlanRequest.fromPartial({}));

          case 2:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query_cosmos_upgrade_current_plan.apply(this, arguments);
}

function query_cosmos_upgrade_applied_plan(_x2, _x3) {
  return _query_cosmos_upgrade_applied_plan.apply(this, arguments);
}

function _query_cosmos_upgrade_applied_plan() {
  _query_cosmos_upgrade_applied_plan = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client, name) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.query.cosmos.upgrage.v1beta1.appliedPlan(_proto.cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.fromPartial({
              name: name
            }));

          case 2:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _query_cosmos_upgrade_applied_plan.apply(this, arguments);
}

function query_cosmos_upgrade_upgraded_consensus_state(_x4) {
  return _query_cosmos_upgrade_upgraded_consensus_state.apply(this, arguments);
}

function _query_cosmos_upgrade_upgraded_consensus_state() {
  _query_cosmos_upgrade_upgraded_consensus_state = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(client) {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return client.query.cosmos.upgrage.v1beta1.upgradedConsensusState(_proto.cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest.fromPartial({}));

          case 2:
            response = _context3.sent;
            return _context3.abrupt("return", response);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _query_cosmos_upgrade_upgraded_consensus_state.apply(this, arguments);
}

function query_cosmos_upgrade_module_versions(_x5, _x6) {
  return _query_cosmos_upgrade_module_versions.apply(this, arguments);
}

function _query_cosmos_upgrade_module_versions() {
  _query_cosmos_upgrade_module_versions = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(client, moduleName) {
    var response;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return client.query.cosmos.upgrage.v1beta1.moduleVersions(_proto.cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.fromPartial({
              moduleName: moduleName
            }));

          case 2:
            response = _context4.sent;
            return _context4.abrupt("return", response);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _query_cosmos_upgrade_module_versions.apply(this, arguments);
}