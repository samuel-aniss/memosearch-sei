"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute_cosmos_evidence_submit_evidence = execute_cosmos_evidence_submit_evidence;
exports.query_cosmos_evidence_all_evidence = query_cosmos_evidence_all_evidence;
exports.query_cosmos_evidence_evidence = query_cosmos_evidence_evidence;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _proto = require("../../proto");

// Supported query interfaces - types/proto/cosmos/evidence/v1beta1/query.rpc.query.d.ts
// Supported tranasction interfaces - types/proto/cosmos/evidence/v1beta1/tx.rpc.msg.d.ts
//---------------------------------------------
// COSMOS::EVIDENCE MODULE - QUERY HELPERS
// --------------------------------------------
function query_cosmos_evidence_evidence(_x, _x2) {
  return _query_cosmos_evidence_evidence.apply(this, arguments);
}

function _query_cosmos_evidence_evidence() {
  _query_cosmos_evidence_evidence = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client, evidenceHash) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query.cosmos.evidence.v1beta1.evidence(_proto.cosmos.evidence.v1beta1.QueryEvidenceRequest.fromPartial({
              evidenceHash: evidenceHash
            }));

          case 2:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query_cosmos_evidence_evidence.apply(this, arguments);
}

function query_cosmos_evidence_all_evidence(_x3, _x4, _x5) {
  return _query_cosmos_evidence_all_evidence.apply(this, arguments);
} //---------------------------------------------
// COSMOS::EVIDENCE MODULE - TRANSACTION HELPERS
// --------------------------------------------
// MsgSubmitEvidence


function _query_cosmos_evidence_all_evidence() {
  _query_cosmos_evidence_all_evidence = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client, offset, limit) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.query.cosmos.evidence.v1beta1.allEvidence(_proto.cosmos.evidence.v1beta1.QueryAllEvidenceRequest.fromPartial({
              pagination: _proto.cosmos.base.query.v1beta1.PageRequest.fromPartial({
                offset: offset,
                limit: limit
              })
            }));

          case 2:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _query_cosmos_evidence_all_evidence.apply(this, arguments);
}

function execute_cosmos_evidence_submit_evidence(_x6, _x7) {
  return _execute_cosmos_evidence_submit_evidence.apply(this, arguments);
}

function _execute_cosmos_evidence_submit_evidence() {
  _execute_cosmos_evidence_submit_evidence = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(submitter, evidence) {
    var msg;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            msg = _proto.cosmos.evidence.v1beta1.MsgSubmitEvidence.fromPartial({
              submitter: submitter,
              evidence: evidence
            });
            return _context3.abrupt("return", msg);

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _execute_cosmos_evidence_submit_evidence.apply(this, arguments);
}