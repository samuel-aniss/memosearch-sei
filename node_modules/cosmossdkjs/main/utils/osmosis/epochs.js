"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.query_osmosis_epoch_currentEpoch = query_osmosis_epoch_currentEpoch;
exports.query_osmosis_epoch_epochInfos = query_osmosis_epoch_epochInfos;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _proto = require("../../proto");

// Supported query interfaces - types/proto/osmosis/epochs/query.rpc.query.d.ts
//---------------------------------------------
// OSMOSIS::EPOCH MODULE - QUERY HELPERS
// --------------------------------------------
function query_osmosis_epoch_epochInfos(_x) {
  return _query_osmosis_epoch_epochInfos.apply(this, arguments);
}

function _query_osmosis_epoch_epochInfos() {
  _query_osmosis_epoch_epochInfos = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query.osmosis.epoches.v1.epochInfos(_proto.osmosis.epochs.v1beta1.QueryEpochsInfoRequest.fromPartial({}));

          case 2:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query_osmosis_epoch_epochInfos.apply(this, arguments);
}

function query_osmosis_epoch_currentEpoch(_x2, _x3) {
  return _query_osmosis_epoch_currentEpoch.apply(this, arguments);
}

function _query_osmosis_epoch_currentEpoch() {
  _query_osmosis_epoch_currentEpoch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client, identifier) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.query.osmosis.epoches.v1.currentEpoch(_proto.osmosis.epochs.v1beta1.QueryCurrentEpochRequest.fromPartial({
              identifier: identifier
            }));

          case 2:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _query_osmosis_epoch_currentEpoch.apply(this, arguments);
}