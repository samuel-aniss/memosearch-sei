"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute_osmosis_tokenfactory_burn = execute_osmosis_tokenfactory_burn;
exports.execute_osmosis_tokenfactory_changeAdmin = execute_osmosis_tokenfactory_changeAdmin;
exports.execute_osmosis_tokenfactory_createDenom = execute_osmosis_tokenfactory_createDenom;
exports.execute_osmosis_tokenfactory_mint = execute_osmosis_tokenfactory_mint;
exports.query_osmosis_tokenfactory_denomAuthorityMetadata = query_osmosis_tokenfactory_denomAuthorityMetadata;
exports.query_osmosis_tokenfactory_denomsFromCreator = query_osmosis_tokenfactory_denomsFromCreator;
exports.query_osmosis_tokenfactory_params = query_osmosis_tokenfactory_params;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _proto = require("../../proto");

// Supported query interfaces - types/proto/osmosis/tokenfactory/v1beta1/query.rpc.query.d.ts
// Supported transaction interfaces - types/proto/osmosis/tokenfactory/v1beta1/tx.rpc.msg.d.ts
//---------------------------------------------
// OSMOSIS::TOKENFACTORY MODULE - QUERY HELPERS
// --------------------------------------------
function query_osmosis_tokenfactory_params(_x) {
  return _query_osmosis_tokenfactory_params.apply(this, arguments);
}

function _query_osmosis_tokenfactory_params() {
  _query_osmosis_tokenfactory_params = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query.osmosis.tokenfactory.params(_proto.osmosis.tokenfactory.v1beta1.QueryParamsRequest.fromPartial({}));

          case 2:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query_osmosis_tokenfactory_params.apply(this, arguments);
}

function query_osmosis_tokenfactory_denomAuthorityMetadata(_x2, _x3) {
  return _query_osmosis_tokenfactory_denomAuthorityMetadata.apply(this, arguments);
}

function _query_osmosis_tokenfactory_denomAuthorityMetadata() {
  _query_osmosis_tokenfactory_denomAuthorityMetadata = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client, denom) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.query.osmosis.tokenfactory.denomAuthorityMetadata(_proto.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.fromPartial({
              denom: denom
            }));

          case 2:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _query_osmosis_tokenfactory_denomAuthorityMetadata.apply(this, arguments);
}

function query_osmosis_tokenfactory_denomsFromCreator(_x4, _x5) {
  return _query_osmosis_tokenfactory_denomsFromCreator.apply(this, arguments);
} //---------------------------------------------
// OSMOSIS::TOKENFACTORY MODULE - TRANSACTION HELPERS
// --------------------------------------------
//MsgCreateDenom


function _query_osmosis_tokenfactory_denomsFromCreator() {
  _query_osmosis_tokenfactory_denomsFromCreator = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(client, creator) {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return client.query.osmosis.tokenfactory.denomsFromCreator(_proto.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.fromPartial({
              creator: creator
            }));

          case 2:
            response = _context3.sent;
            return _context3.abrupt("return", response);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _query_osmosis_tokenfactory_denomsFromCreator.apply(this, arguments);
}

function execute_osmosis_tokenfactory_createDenom(_x6, _x7) {
  return _execute_osmosis_tokenfactory_createDenom.apply(this, arguments);
} //MsgMint


function _execute_osmosis_tokenfactory_createDenom() {
  _execute_osmosis_tokenfactory_createDenom = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(sender, subdenom) {
    var msg;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            msg = _proto.osmosis.tokenfactory.v1beta1.MsgCreateDenom.fromPartial({
              sender: sender,
              subdenom: subdenom
            });
            return _context4.abrupt("return", msg);

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _execute_osmosis_tokenfactory_createDenom.apply(this, arguments);
}

function execute_osmosis_tokenfactory_mint(_x8, _x9) {
  return _execute_osmosis_tokenfactory_mint.apply(this, arguments);
} //MsgBurn


function _execute_osmosis_tokenfactory_mint() {
  _execute_osmosis_tokenfactory_mint = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(sender, amount) {
    var msg;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            msg = _proto.osmosis.tokenfactory.v1beta1.MsgMint.fromPartial({
              sender: sender,
              amount: amount
            });
            return _context5.abrupt("return", msg);

          case 2:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _execute_osmosis_tokenfactory_mint.apply(this, arguments);
}

function execute_osmosis_tokenfactory_burn(_x10, _x11) {
  return _execute_osmosis_tokenfactory_burn.apply(this, arguments);
} //MsgChangeAdmin


function _execute_osmosis_tokenfactory_burn() {
  _execute_osmosis_tokenfactory_burn = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(sender, amount) {
    var msg;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            msg = _proto.osmosis.tokenfactory.v1beta1.MsgBurn.fromPartial({
              sender: sender,
              amount: amount
            });
            return _context6.abrupt("return", msg);

          case 2:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _execute_osmosis_tokenfactory_burn.apply(this, arguments);
}

function execute_osmosis_tokenfactory_changeAdmin(_x12, _x13, _x14) {
  return _execute_osmosis_tokenfactory_changeAdmin.apply(this, arguments);
}

function _execute_osmosis_tokenfactory_changeAdmin() {
  _execute_osmosis_tokenfactory_changeAdmin = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(sender, denom, newAdmin) {
    var msg;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            msg = _proto.osmosis.tokenfactory.v1beta1.MsgChangeAdmin.fromPartial({
              sender: sender,
              denom: denom,
              newAdmin: newAdmin
            });
            return _context7.abrupt("return", msg);

          case 2:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _execute_osmosis_tokenfactory_changeAdmin.apply(this, arguments);
}