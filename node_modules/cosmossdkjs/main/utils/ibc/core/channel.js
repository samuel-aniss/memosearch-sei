"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute_ibc_core_channel_acknowledgement = execute_ibc_core_channel_acknowledgement;
exports.execute_ibc_core_channel_channelCloseConfirm = execute_ibc_core_channel_channelCloseConfirm;
exports.execute_ibc_core_channel_channelCloseInit = execute_ibc_core_channel_channelCloseInit;
exports.execute_ibc_core_channel_channelOpenAck = execute_ibc_core_channel_channelOpenAck;
exports.execute_ibc_core_channel_channelOpenConfirm = execute_ibc_core_channel_channelOpenConfirm;
exports.execute_ibc_core_channel_channelOpenInit = execute_ibc_core_channel_channelOpenInit;
exports.execute_ibc_core_channel_channelOpenTry = execute_ibc_core_channel_channelOpenTry;
exports.execute_ibc_core_channel_recvPacket = execute_ibc_core_channel_recvPacket;
exports.execute_ibc_core_channel_timeout = execute_ibc_core_channel_timeout;
exports.execute_ibc_core_channel_timeoutOnClose = execute_ibc_core_channel_timeoutOnClose;
exports.query_ibc_core_channel_channel = query_ibc_core_channel_channel;
exports.query_ibc_core_channel_channelClientState = query_ibc_core_channel_channelClientState;
exports.query_ibc_core_channel_channelConsensusState = query_ibc_core_channel_channelConsensusState;
exports.query_ibc_core_channel_channels = query_ibc_core_channel_channels;
exports.query_ibc_core_channel_connectionChannels = query_ibc_core_channel_connectionChannels;
exports.query_ibc_core_channel_nextSequenceReceive = query_ibc_core_channel_nextSequenceReceive;
exports.query_ibc_core_channel_packetAcknowledgement = query_ibc_core_channel_packetAcknowledgement;
exports.query_ibc_core_channel_packetAcknowledgements = query_ibc_core_channel_packetAcknowledgements;
exports.query_ibc_core_channel_packetCommitment = query_ibc_core_channel_packetCommitment;
exports.query_ibc_core_channel_packetCommitments = query_ibc_core_channel_packetCommitments;
exports.query_ibc_core_channel_packetReceipt = query_ibc_core_channel_packetReceipt;
exports.query_ibc_core_channel_unreceivedAcks = query_ibc_core_channel_unreceivedAcks;
exports.query_ibc_core_channel_unreceivedPackets = query_ibc_core_channel_unreceivedPackets;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _proto = require("../../../proto");

// Supported query interfaces - types/proto/ibc/core/channel/v1/query.rpc.query.d.ts
//---------------------------------------------
// IBC::CHANNEL MODULE - QUERY HELPERS
// --------------------------------------------
function query_ibc_core_channel_channel(_x, _x2, _x3) {
  return _query_ibc_core_channel_channel.apply(this, arguments);
}

function _query_ibc_core_channel_channel() {
  _query_ibc_core_channel_channel = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client, portId, channelId) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.query.ibc.core.channel.v1.channel(_proto.ibc.core.channel.v1.QueryChannelRequest.fromPartial({
              portId: portId,
              channelId: channelId
            }));

          case 2:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query_ibc_core_channel_channel.apply(this, arguments);
}

function query_ibc_core_channel_channels(_x4, _x5, _x6) {
  return _query_ibc_core_channel_channels.apply(this, arguments);
}

function _query_ibc_core_channel_channels() {
  _query_ibc_core_channel_channels = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client, offset, limit) {
    var response;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return client.query.ibc.core.channel.v1.channels(_proto.ibc.core.channel.v1.QueryChannelsRequest.fromPartial({
              pagination: _proto.cosmos.base.query.v1beta1.PageRequest.fromPartial({
                offset: offset,
                limit: limit
              })
            }));

          case 2:
            response = _context2.sent;
            return _context2.abrupt("return", response);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _query_ibc_core_channel_channels.apply(this, arguments);
}

function query_ibc_core_channel_connectionChannels(_x7, _x8, _x9, _x10) {
  return _query_ibc_core_channel_connectionChannels.apply(this, arguments);
}

function _query_ibc_core_channel_connectionChannels() {
  _query_ibc_core_channel_connectionChannels = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(client, connection, offset, limit) {
    var response;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return client.query.ibc.core.channel.v1.connectionChannels(_proto.ibc.core.channel.v1.QueryConnectionChannelsRequest.fromPartial({
              connection: connection,
              pagination: _proto.cosmos.base.query.v1beta1.PageRequest.fromPartial({
                offset: offset,
                limit: limit
              })
            }));

          case 2:
            response = _context3.sent;
            return _context3.abrupt("return", response);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _query_ibc_core_channel_connectionChannels.apply(this, arguments);
}

function query_ibc_core_channel_channelClientState(_x11, _x12, _x13) {
  return _query_ibc_core_channel_channelClientState.apply(this, arguments);
}

function _query_ibc_core_channel_channelClientState() {
  _query_ibc_core_channel_channelClientState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(client, portId, channelId) {
    var response;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return client.query.ibc.core.channel.v1.channelClientState(_proto.ibc.core.channel.v1.QueryChannelClientStateRequest.fromPartial({
              portId: portId,
              channelId: channelId
            }));

          case 2:
            response = _context4.sent;
            return _context4.abrupt("return", response);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _query_ibc_core_channel_channelClientState.apply(this, arguments);
}

function query_ibc_core_channel_channelConsensusState(_x14, _x15, _x16, _x17, _x18) {
  return _query_ibc_core_channel_channelConsensusState.apply(this, arguments);
}

function _query_ibc_core_channel_channelConsensusState() {
  _query_ibc_core_channel_channelConsensusState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(client, portId, channelId, revisionNumber, revisionHeight) {
    var response;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return client.query.ibc.core.channel.v1.channelConsensusState(_proto.ibc.core.channel.v1.QueryChannelConsensusStateRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              revisionNumber: revisionNumber,
              revisionHeight: revisionHeight
            }));

          case 2:
            response = _context5.sent;
            return _context5.abrupt("return", response);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _query_ibc_core_channel_channelConsensusState.apply(this, arguments);
}

function query_ibc_core_channel_packetCommitment(_x19, _x20, _x21, _x22) {
  return _query_ibc_core_channel_packetCommitment.apply(this, arguments);
}

function _query_ibc_core_channel_packetCommitment() {
  _query_ibc_core_channel_packetCommitment = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(client, portId, channelId, sequence) {
    var response;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return client.query.ibc.core.channel.v1.packetCommitment(_proto.ibc.core.channel.v1.QueryPacketCommitmentRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              sequence: sequence
            }));

          case 2:
            response = _context6.sent;
            return _context6.abrupt("return", response);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _query_ibc_core_channel_packetCommitment.apply(this, arguments);
}

function query_ibc_core_channel_packetCommitments(_x23, _x24, _x25, _x26, _x27) {
  return _query_ibc_core_channel_packetCommitments.apply(this, arguments);
}

function _query_ibc_core_channel_packetCommitments() {
  _query_ibc_core_channel_packetCommitments = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(client, portId, channelId, offset, limit) {
    var response;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return client.query.ibc.core.channel.v1.packetCommitments(_proto.ibc.core.channel.v1.QueryPacketCommitmentsRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              pagination: _proto.cosmos.base.query.v1beta1.PageRequest.fromPartial({
                offset: offset,
                limit: limit
              })
            }));

          case 2:
            response = _context7.sent;
            return _context7.abrupt("return", response);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _query_ibc_core_channel_packetCommitments.apply(this, arguments);
}

function query_ibc_core_channel_packetReceipt(_x28, _x29, _x30, _x31) {
  return _query_ibc_core_channel_packetReceipt.apply(this, arguments);
}

function _query_ibc_core_channel_packetReceipt() {
  _query_ibc_core_channel_packetReceipt = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(client, portId, channelId, sequence) {
    var response;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return client.query.ibc.core.channel.v1.packetReceipt(_proto.ibc.core.channel.v1.QueryPacketReceiptRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              sequence: sequence
            }));

          case 2:
            response = _context8.sent;
            return _context8.abrupt("return", response);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _query_ibc_core_channel_packetReceipt.apply(this, arguments);
}

function query_ibc_core_channel_packetAcknowledgement(_x32, _x33, _x34, _x35) {
  return _query_ibc_core_channel_packetAcknowledgement.apply(this, arguments);
}

function _query_ibc_core_channel_packetAcknowledgement() {
  _query_ibc_core_channel_packetAcknowledgement = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(client, portId, channelId, sequence) {
    var response;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return client.query.ibc.core.channel.v1.packetAcknowledgement(_proto.ibc.core.channel.v1.QueryPacketAcknowledgementRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              sequence: sequence
            }));

          case 2:
            response = _context9.sent;
            return _context9.abrupt("return", response);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _query_ibc_core_channel_packetAcknowledgement.apply(this, arguments);
}

function query_ibc_core_channel_packetAcknowledgements(_x36, _x37, _x38, _x39, _x40, _x41) {
  return _query_ibc_core_channel_packetAcknowledgements.apply(this, arguments);
}

function _query_ibc_core_channel_packetAcknowledgements() {
  _query_ibc_core_channel_packetAcknowledgements = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(client, portId, channelId, packetCommitmentSequences, offset, limit) {
    var response;
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return client.query.ibc.core.channel.v1.packetAcknowledgements(_proto.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              packetCommitmentSequences: packetCommitmentSequences,
              pagination: _proto.cosmos.base.query.v1beta1.PageRequest.fromPartial({
                offset: offset,
                limit: limit
              })
            }));

          case 2:
            response = _context10.sent;
            return _context10.abrupt("return", response);

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _query_ibc_core_channel_packetAcknowledgements.apply(this, arguments);
}

function query_ibc_core_channel_unreceivedPackets(_x42, _x43, _x44, _x45) {
  return _query_ibc_core_channel_unreceivedPackets.apply(this, arguments);
}

function _query_ibc_core_channel_unreceivedPackets() {
  _query_ibc_core_channel_unreceivedPackets = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(client, portId, channelId, packetCommitmentSequences) {
    var response;
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return client.query.ibc.core.channel.v1.unreceivedPackets(_proto.ibc.core.channel.v1.QueryUnreceivedPacketsRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              packetCommitmentSequences: packetCommitmentSequences
            }));

          case 2:
            response = _context11.sent;
            return _context11.abrupt("return", response);

          case 4:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  return _query_ibc_core_channel_unreceivedPackets.apply(this, arguments);
}

function query_ibc_core_channel_unreceivedAcks(_x46, _x47, _x48, _x49) {
  return _query_ibc_core_channel_unreceivedAcks.apply(this, arguments);
}

function _query_ibc_core_channel_unreceivedAcks() {
  _query_ibc_core_channel_unreceivedAcks = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12(client, portId, channelId, packetAckSequences) {
    var response;
    return _regenerator["default"].wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return client.query.ibc.core.channel.v1.unreceivedAcks(_proto.ibc.core.channel.v1.QueryUnreceivedAcksRequest.fromPartial({
              portId: portId,
              channelId: channelId,
              packetAckSequences: packetAckSequences
            }));

          case 2:
            response = _context12.sent;
            return _context12.abrupt("return", response);

          case 4:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _query_ibc_core_channel_unreceivedAcks.apply(this, arguments);
}

function query_ibc_core_channel_nextSequenceReceive(_x50, _x51, _x52) {
  return _query_ibc_core_channel_nextSequenceReceive.apply(this, arguments);
} // Supported transaction interfaces - types/proto/ibc/core/channel/v1/tx.rpc.msg.d.ts
//---------------------------------------------
// IBC::CHANNEL MODULE - TRANSACTION HELPERS
// --------------------------------------------
//MsgChannelOpenInit


function _query_ibc_core_channel_nextSequenceReceive() {
  _query_ibc_core_channel_nextSequenceReceive = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13(client, portId, channelId) {
    var response;
    return _regenerator["default"].wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return client.query.ibc.core.channel.v1.nextSequenceReceive(_proto.ibc.core.channel.v1.QueryNextSequenceReceiveRequest.fromPartial({
              portId: portId,
              channelId: channelId
            }));

          case 2:
            response = _context13.sent;
            return _context13.abrupt("return", response);

          case 4:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  return _query_ibc_core_channel_nextSequenceReceive.apply(this, arguments);
}

function execute_ibc_core_channel_channelOpenInit(_x53, _x54, _x55) {
  return _execute_ibc_core_channel_channelOpenInit.apply(this, arguments);
} //MsgChannelOpenTry


function _execute_ibc_core_channel_channelOpenInit() {
  _execute_ibc_core_channel_channelOpenInit = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14(portId, channel, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelOpenInit.fromPartial({
              portId: portId,
              channel: channel,
              signer: signer
            });
            return _context14.abrupt("return", msg);

          case 2:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  return _execute_ibc_core_channel_channelOpenInit.apply(this, arguments);
}

function execute_ibc_core_channel_channelOpenTry(_x56, _x57, _x58, _x59, _x60, _x61, _x62) {
  return _execute_ibc_core_channel_channelOpenTry.apply(this, arguments);
} //MsgChannelOpenAck


function _execute_ibc_core_channel_channelOpenTry() {
  _execute_ibc_core_channel_channelOpenTry = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15(portId, previousChannelId, channel, counterpartyVersion, proofInit, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelOpenTry.fromPartial({
              portId: portId,
              previousChannelId: previousChannelId,
              channel: channel,
              counterpartyVersion: counterpartyVersion,
              proofInit: proofInit,
              proofHeight: proofHeight,
              signer: signer
            });
            return _context15.abrupt("return", msg);

          case 2:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  return _execute_ibc_core_channel_channelOpenTry.apply(this, arguments);
}

function execute_ibc_core_channel_channelOpenAck(_x63, _x64, _x65, _x66, _x67, _x68, _x69) {
  return _execute_ibc_core_channel_channelOpenAck.apply(this, arguments);
} //MsgChannelOpenConfirm


function _execute_ibc_core_channel_channelOpenAck() {
  _execute_ibc_core_channel_channelOpenAck = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16(portId, channelId, counterpartyChannelId, counterpartyVersion, proofTry, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelOpenAck.fromPartial({
              portId: portId,
              counterpartyChannelId: counterpartyChannelId,
              channelId: channelId,
              counterpartyVersion: counterpartyVersion,
              proofTry: proofTry,
              proofHeight: proofHeight,
              signer: signer
            });
            return _context16.abrupt("return", msg);

          case 2:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));
  return _execute_ibc_core_channel_channelOpenAck.apply(this, arguments);
}

function execute_ibc_core_channel_channelOpenConfirm(_x70, _x71, _x72, _x73, _x74) {
  return _execute_ibc_core_channel_channelOpenConfirm.apply(this, arguments);
} //MsgChannelCloseInit


function _execute_ibc_core_channel_channelOpenConfirm() {
  _execute_ibc_core_channel_channelOpenConfirm = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17(portId, channelId, proofAck, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelOpenConfirm.fromPartial({
              portId: portId,
              channelId: channelId,
              proofAck: proofAck,
              proofHeight: proofHeight,
              signer: signer
            });
            return _context17.abrupt("return", msg);

          case 2:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  return _execute_ibc_core_channel_channelOpenConfirm.apply(this, arguments);
}

function execute_ibc_core_channel_channelCloseInit(_x75, _x76, _x77) {
  return _execute_ibc_core_channel_channelCloseInit.apply(this, arguments);
} //MsgChannelCloseConfirm


function _execute_ibc_core_channel_channelCloseInit() {
  _execute_ibc_core_channel_channelCloseInit = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18(portId, channelId, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelCloseInit.fromPartial({
              portId: portId,
              channelId: channelId,
              signer: signer
            });
            return _context18.abrupt("return", msg);

          case 2:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));
  return _execute_ibc_core_channel_channelCloseInit.apply(this, arguments);
}

function execute_ibc_core_channel_channelCloseConfirm(_x78, _x79, _x80, _x81, _x82) {
  return _execute_ibc_core_channel_channelCloseConfirm.apply(this, arguments);
} //MsgRecvPacket


function _execute_ibc_core_channel_channelCloseConfirm() {
  _execute_ibc_core_channel_channelCloseConfirm = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19(portId, channelId, proofInit, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgChannelCloseConfirm.fromPartial({
              portId: portId,
              channelId: channelId,
              signer: signer,
              proofInit: proofInit,
              proofHeight: proofHeight
            });
            return _context19.abrupt("return", msg);

          case 2:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  return _execute_ibc_core_channel_channelCloseConfirm.apply(this, arguments);
}

function execute_ibc_core_channel_recvPacket(_x83, _x84, _x85, _x86) {
  return _execute_ibc_core_channel_recvPacket.apply(this, arguments);
} //MsgTimeout


function _execute_ibc_core_channel_recvPacket() {
  _execute_ibc_core_channel_recvPacket = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20(packet, proofCommitment, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgRecvPacket.fromPartial({
              packet: packet,
              proofCommitment: proofCommitment,
              proofHeight: proofHeight,
              signer: signer
            });
            return _context20.abrupt("return", msg);

          case 2:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  return _execute_ibc_core_channel_recvPacket.apply(this, arguments);
}

function execute_ibc_core_channel_timeout(_x87, _x88, _x89, _x90, _x91) {
  return _execute_ibc_core_channel_timeout.apply(this, arguments);
} //MsgTimeoutOnClose


function _execute_ibc_core_channel_timeout() {
  _execute_ibc_core_channel_timeout = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21(packet, proofUnreceived, proofHeight, nextSequenceRecv, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgTimeout.fromPartial({
              packet: packet,
              proofUnreceived: proofUnreceived,
              proofHeight: proofHeight,
              nextSequenceRecv: nextSequenceRecv,
              signer: signer
            });
            return _context21.abrupt("return", msg);

          case 2:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  return _execute_ibc_core_channel_timeout.apply(this, arguments);
}

function execute_ibc_core_channel_timeoutOnClose(_x92, _x93, _x94, _x95, _x96, _x97) {
  return _execute_ibc_core_channel_timeoutOnClose.apply(this, arguments);
} //MsgAcknowledgement


function _execute_ibc_core_channel_timeoutOnClose() {
  _execute_ibc_core_channel_timeoutOnClose = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22(packet, proofUnreceived, proofClose, proofHeight, nextSequenceRecv, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgTimeoutOnClose.fromPartial({
              packet: packet,
              proofUnreceived: proofUnreceived,
              proofHeight: proofHeight,
              nextSequenceRecv: nextSequenceRecv,
              signer: signer
            });
            return _context22.abrupt("return", msg);

          case 2:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));
  return _execute_ibc_core_channel_timeoutOnClose.apply(this, arguments);
}

function execute_ibc_core_channel_acknowledgement(_x98, _x99, _x100, _x101, _x102) {
  return _execute_ibc_core_channel_acknowledgement.apply(this, arguments);
}

function _execute_ibc_core_channel_acknowledgement() {
  _execute_ibc_core_channel_acknowledgement = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23(packet, acknowledgement, proofAcked, proofHeight, signer) {
    var msg;
    return _regenerator["default"].wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            msg = _proto.ibc.core.channel.v1.MsgAcknowledgement.fromPartial({
              packet: packet,
              acknowledgement: acknowledgement,
              proofHeight: proofHeight,
              proofAcked: proofAcked,
              signer: signer
            });
            return _context23.abrupt("return", msg);

          case 2:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  return _execute_ibc_core_channel_acknowledgement.apply(this, arguments);
}