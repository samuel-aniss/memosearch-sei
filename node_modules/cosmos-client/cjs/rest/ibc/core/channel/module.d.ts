import { CosmosSDK } from '../../../../sdk';
export declare function channels(sdk: CosmosSDK, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").InlineResponse20075>>;
export declare function channel(sdk: CosmosSDK, channelID: string, portID: string): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").InlineResponse20076>>;
export declare function channelClientState(sdk: CosmosSDK, channelID: string, portID: string): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod>>;
export declare function channelConsensusState(sdk: CosmosSDK, channelID: string, portID: string, revisionNumber: bigint, revisionHeight: bigint): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1>>;
export declare function nextSequenceReceive(sdk: CosmosSDK, channelID: string, portID: string): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod>>;
export declare function packetAcknowledgements(sdk: CosmosSDK, channelID: string, portID: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod>>;
export declare function packetAcknowledgement(sdk: CosmosSDK, channelID: string, portID: string, sequence: bigint): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>>;
export declare function packetCommitments(sdk: CosmosSDK, channelID: string, portID: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod>>;
export declare function unreceivedAcks(sdk: CosmosSDK, channelID: string, portID: string, packetAckSequences: bigint[]): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod>>;
export declare function unreceivedPackets(sdk: CosmosSDK, channelID: string, portID: string, packetAckSequences: bigint[]): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod>>;
export declare function packetCommitment(sdk: CosmosSDK, channelID: string, portID: string, sequence: bigint): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>>;
export declare function packetReceipt(sdk: CosmosSDK, channelID: string, portID: string, sequence: bigint): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>>;
export declare function connectionChannels(sdk: CosmosSDK, connection: string, paginationKey?: string, paginationOffset?: bigint, paginationLimit?: bigint, paginationCountTotal?: boolean): Promise<import("axios").AxiosResponse<import("../../../../openapi/api").QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod>>;
