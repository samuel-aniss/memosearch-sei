"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectionChannels = exports.packetReceipt = exports.packetCommitment = exports.unreceivedPackets = exports.unreceivedAcks = exports.packetCommitments = exports.packetAcknowledgement = exports.packetAcknowledgements = exports.nextSequenceReceive = exports.channelConsensusState = exports.channelClientState = exports.channel = exports.channels = void 0;
var api_1 = require("../../../../openapi/api");
function channels(sdk, paginationKey, paginationOffset, paginationLimit, paginationCountTotal) {
    return new api_1.QueryApi(undefined, sdk.url).channels(paginationKey, paginationOffset === null || paginationOffset === void 0 ? void 0 : paginationOffset.toString(), paginationLimit === null || paginationLimit === void 0 ? void 0 : paginationLimit.toString(), paginationCountTotal);
}
exports.channels = channels;
function channel(sdk, channelID, portID) {
    return new api_1.QueryApi(undefined, sdk.url).channel(channelID, portID);
}
exports.channel = channel;
function channelClientState(sdk, channelID, portID) {
    return new api_1.QueryApi(undefined, sdk.url).channelClientState(channelID, portID);
}
exports.channelClientState = channelClientState;
function channelConsensusState(sdk, channelID, portID, revisionNumber, revisionHeight) {
    return new api_1.QueryApi(undefined, sdk.url).channelConsensusState(channelID, portID, revisionNumber.toString(), revisionHeight.toString());
}
exports.channelConsensusState = channelConsensusState;
function nextSequenceReceive(sdk, channelID, portID) {
    return new api_1.QueryApi(undefined, sdk.url).nextSequenceReceive(channelID, portID);
}
exports.nextSequenceReceive = nextSequenceReceive;
function packetAcknowledgements(sdk, channelID, portID, paginationKey, paginationOffset, paginationLimit, paginationCountTotal) {
    return new api_1.QueryApi(undefined, sdk.url).packetAcknowledgements(channelID, portID, paginationKey, paginationOffset === null || paginationOffset === void 0 ? void 0 : paginationOffset.toString(), paginationLimit === null || paginationLimit === void 0 ? void 0 : paginationLimit.toString(), paginationCountTotal);
}
exports.packetAcknowledgements = packetAcknowledgements;
function packetAcknowledgement(sdk, channelID, portID, sequence) {
    return new api_1.QueryApi(undefined, sdk.url).packetAcknowledgement(channelID, portID, sequence.toString());
}
exports.packetAcknowledgement = packetAcknowledgement;
function packetCommitments(sdk, channelID, portID, paginationKey, paginationOffset, paginationLimit, paginationCountTotal) {
    return new api_1.QueryApi(undefined, sdk.url).packetCommitments(channelID, portID, paginationKey, paginationOffset === null || paginationOffset === void 0 ? void 0 : paginationOffset.toString(), paginationLimit === null || paginationLimit === void 0 ? void 0 : paginationLimit.toString(), paginationCountTotal);
}
exports.packetCommitments = packetCommitments;
function unreceivedAcks(sdk, channelID, portID, packetAckSequences) {
    return new api_1.QueryApi(undefined, sdk.url).unreceivedAcks(channelID, portID, packetAckSequences.map(function (sequence) { return sequence.toString(); }));
}
exports.unreceivedAcks = unreceivedAcks;
function unreceivedPackets(sdk, channelID, portID, packetAckSequences) {
    return new api_1.QueryApi(undefined, sdk.url).unreceivedPackets(channelID, portID, packetAckSequences.map(function (sequence) { return sequence.toString(); }));
}
exports.unreceivedPackets = unreceivedPackets;
function packetCommitment(sdk, channelID, portID, sequence) {
    return new api_1.QueryApi(undefined, sdk.url).packetCommitment(channelID, portID, sequence.toString());
}
exports.packetCommitment = packetCommitment;
function packetReceipt(sdk, channelID, portID, sequence) {
    return new api_1.QueryApi(undefined, sdk.url).packetReceipt(channelID, portID, sequence.toString());
}
exports.packetReceipt = packetReceipt;
function connectionChannels(sdk, connection, paginationKey, paginationOffset, paginationLimit, paginationCountTotal) {
    return new api_1.QueryApi(undefined, sdk.url).connectionChannels(connection, paginationKey, paginationOffset === null || paginationOffset === void 0 ? void 0 : paginationOffset.toString(), paginationLimit === null || paginationLimit === void 0 ? void 0 : paginationLimit.toString(), paginationCountTotal);
}
exports.connectionChannels = connectionChannels;
