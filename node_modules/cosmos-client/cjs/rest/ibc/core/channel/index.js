"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.channel = void 0;
var types_1 = require("../../../../types");
var proto_1 = require("../../../../proto");
exports.channel = __importStar(require("./module"));
types_1.codec.register('/ibc.core.channel.v1.Channel', proto_1.ibc.core.channel.v1.Channel);
types_1.codec.register('/ibc.core.channel.v1.Counterparty', proto_1.ibc.core.channel.v1.Counterparty);
types_1.codec.register('/ibc.core.channel.v1.Packet', proto_1.ibc.core.channel.v1.Packet);
types_1.codec.register('/ibc.core.channel.v1.MsgAcknowledgement', proto_1.ibc.core.channel.v1.MsgAcknowledgement);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelCloseConfirm', proto_1.ibc.core.channel.v1.MsgChannelCloseConfirm);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelCloseInit', proto_1.ibc.core.channel.v1.MsgChannelCloseInit);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelOpenAck', proto_1.ibc.core.channel.v1.MsgChannelOpenAck);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelOpenConfirm', proto_1.ibc.core.channel.v1.MsgChannelOpenConfirm);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelOpenInit', proto_1.ibc.core.channel.v1.MsgChannelOpenInit);
types_1.codec.register('/ibc.core.channel.v1.MsgChannelOpenTry', proto_1.ibc.core.channel.v1.MsgChannelOpenTry);
types_1.codec.register('/ibc.core.channel.v1.MsgRecvPacket', proto_1.ibc.core.channel.v1.MsgRecvPacket);
types_1.codec.register('/ibc.core.channel.v1.MsgTimeoutOnClose', proto_1.ibc.core.channel.v1.MsgTimeoutOnClose);
types_1.codec.register('/ibc.core.channel.v1.MsgTimeout', proto_1.ibc.core.channel.v1.MsgTimeout);
