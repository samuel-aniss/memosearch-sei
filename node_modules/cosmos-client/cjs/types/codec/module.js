"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packAny = exports.unpackAny = exports.packCosmosAny = exports.unpackCosmosAny = exports.register = void 0;
var config_1 = require("../../config");
var proto_1 = require("../../proto");
function register(type, constructor) {
    config_1.config.codecMaps.inv.set(constructor, type);
    config_1.config.codecMaps.encode[type] = constructor.encode;
    config_1.config.codecMaps.decode[type] = constructor.decode;
    config_1.config.codecMaps.fromObject[type] = constructor.fromObject;
}
exports.register = register;
/**
 * CosmosAny -> Instance
 * @param value
 * @returns
 */
function unpackCosmosAny(value) {
    var newValue = {};
    for (var key in value) {
        newValue[key] = packCosmosAny(value[key]);
    }
    var typeURL = value && value['@type'];
    if (!typeURL || !config_1.config.codecMaps.fromObject[typeURL]) {
        return newValue;
    }
    return config_1.config.codecMaps.fromObject[typeURL](newValue);
}
exports.unpackCosmosAny = unpackCosmosAny;
/**
 * CosmosAny -> Any
 * @param value
 */
function packCosmosAny(value) {
    var typeURL = value && value['@type'];
    if (!typeURL || !config_1.config.codecMaps.fromObject[typeURL]) {
        return value;
    }
    var newValue = {};
    for (var key in value) {
        newValue[key] = packCosmosAny(value[key]);
    }
    return new proto_1.google.protobuf.Any({
        type_url: typeURL,
        value: config_1.config.codecMaps.encode[typeURL](config_1.config.codecMaps.fromObject[typeURL](newValue)).finish(),
    });
}
exports.packCosmosAny = packCosmosAny;
/**
 * Any -> Instance
 * @param value
 */
function unpackAny(value) {
    if (!value) {
        throw Error("Object 'value' is undefined");
    }
    if (!value.type_url) {
        throw Error("The field 'type_url' is undefined");
    }
    if (!value.value) {
        throw Error("The field 'value' is undefined");
    }
    return config_1.config.codecMaps.decode[value.type_url](value.value);
}
exports.unpackAny = unpackAny;
/**
 * Instance -> Any
 * @param value
 * @returns
 */
function packAny(value) {
    var constructor = value === null || value === void 0 ? void 0 : value.constructor;
    if (!constructor) {
        throw Error("The field 'constructor' is undefined");
    }
    var typeURL = constructor && config_1.config.codecMaps.inv.get(constructor);
    if (!typeURL) {
        throw Error('This type is not registered');
    }
    var packed = new proto_1.google.protobuf.Any({
        type_url: typeURL,
        value: constructor.encode(value).finish(),
    });
    return packed;
}
exports.packAny = packAny;
