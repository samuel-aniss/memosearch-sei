import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { DEFAULT_AMINO_EXCEPTIONS } from "./aminos";
import { snake } from 'case';
import { camel } from '@osmonauts/utils';
export const defaultTelescopeOptions = {
  // global options (can be overridden through plugins)
  includePackageVar: false,
  typingsFormat: {
    useExact: false,
    timestamp: 'date',
    duration: 'duration'
  },
  stargateClients: {
    enabled: true,
    includeCosmosDefaultTypes: true
  },
  aminoEncoding: {
    enabled: true,
    casingFn: snake,
    exceptions: _objectSpread({}, DEFAULT_AMINO_EXCEPTIONS)
  },
  lcdClients: {
    enabled: true,
    scopedIsExclusive: true
  },
  rpcClients: {
    enabled: true,
    camelCase: true,
    scopedIsExclusive: true
  },
  // packages
  packages: {
    cosmos: {
      stargateClients: {
        enabled: true,
        includeCosmosDefaultTypes: false
      }
    },
    osmosis: {
      aminoEncoding: {
        casingFn: camel
      }
    }
  }
};