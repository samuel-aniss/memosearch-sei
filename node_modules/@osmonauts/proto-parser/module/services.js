import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

export const parseServiceUrl = options => {
  const url = options?.['(google.api.http).get'];
  if (!url) return;
  const match = url.match(/\{([^\}]*)\}/g);
  return {
    url,
    pathParams: match?.length ? match.map(el => el.replace('{', '').replace('}', '')) : []
  };
};
export const parseService = obj => {
  const fields = obj.fields ?? {};
  const options = obj.options ?? {};
  const pathInfo = parseServiceUrl(options);
  if (!pathInfo) return;
  const allParams = Object.keys(fields);
  const queryParams = allParams.filter(param => !pathInfo.pathParams.includes(param));
  return _objectSpread(_objectSpread({}, pathInfo), {}, {
    queryParams
  });
};