"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseServiceUrl = exports.parseService = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var parseServiceUrl = function parseServiceUrl(options) {
  var url = options === null || options === void 0 ? void 0 : options['(google.api.http).get'];
  if (!url) return;
  var match = url.match(/\{([^\}]*)\}/g);
  return {
    url: url,
    pathParams: match !== null && match !== void 0 && match.length ? match.map(function (el) {
      return el.replace('{', '').replace('}', '');
    }) : []
  };
};

exports.parseServiceUrl = parseServiceUrl;

var parseService = function parseService(obj) {
  var _obj$fields, _obj$options;

  var fields = (_obj$fields = obj.fields) !== null && _obj$fields !== void 0 ? _obj$fields : {};
  var options = (_obj$options = obj.options) !== null && _obj$options !== void 0 ? _obj$options : {};
  var pathInfo = parseServiceUrl(options);
  if (!pathInfo) return;
  var allParams = Object.keys(fields);
  var queryParams = allParams.filter(function (param) {
    return !pathInfo.pathParams.includes(param);
  });
  return _objectSpread(_objectSpread({}, pathInfo), {}, {
    queryParams: queryParams
  });
};

exports.parseService = parseService;