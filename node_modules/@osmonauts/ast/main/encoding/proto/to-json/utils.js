"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJSON = exports.arrayTypes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var t = _interopRequireWildcard(require("@babel/types"));

var _types2 = require("../../types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var notUndefinedSetValue = function notUndefinedSetValue(prop, expr) {
  return t.expressionStatement(t.logicalExpression('&&', t.binaryExpression('!==', t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('undefined')), t.assignmentExpression('=', t.memberExpression(t.identifier('obj'), t.identifier(prop)), expr)));
};

var toJSON = {
  //  message.sender !== undefined && (obj.sender = message.sender);
  identity: function identity(args) {
    var prop = args.field.name;
    return notUndefinedSetValue(prop, t.memberExpression(t.identifier('message'), t.identifier(prop)));
  },
  string: function string(args) {
    return toJSON.identity(args);
  },
  "double": function double(args) {
    return toJSON.identity(args);
  },
  "float": function float(args) {
    return toJSON.identity(args);
  },
  bool: function bool(args) {
    return toJSON.identity(args);
  },
  // message.maxDepth !== undefined && (obj.maxDepth = Math.round(message.maxDepth));
  number: function number(args) {
    var prop = args.field.name;
    return notUndefinedSetValue(prop, t.callExpression(t.memberExpression(t.identifier('Math'), t.identifier('round')), [t.memberExpression(t.identifier('message'), t.identifier(prop))]));
  },
  // message.maxDepth !== undefined && (obj.maxDepth = Math.round(message.maxDepth));
  int32: function int32(args) {
    return toJSON.number(args);
  },
  uint32: function uint32(args) {
    return toJSON.number(args);
  },
  sint32: function sint32(args) {
    return toJSON.number(args);
  },
  fixed32: function fixed32(args) {
    return toJSON.number(args);
  },
  sfixed32: function sfixed32(args) {
    return toJSON.number(args);
  },
  // message.poolId !== undefined && (obj.poolId = (message.poolId || Long.UZERO).toString());
  // message.poolId !== undefined && (obj.poolId = (message.poolId || undefined).toString());
  "long": function long(args) {
    args.context.addUtil('Long');
    var prop = args.field.name;
    return notUndefinedSetValue(prop, t.callExpression(t.memberExpression(t.logicalExpression('||', t.memberExpression(t.identifier('message'), t.identifier(prop)), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOptional)), t.identifier('toString')), []));
  },
  int64: function int64(args) {
    return toJSON["long"](args);
  },
  uint64: function uint64(args) {
    return toJSON["long"](args);
  },
  sint64: function sint64(args) {
    return toJSON["long"](args);
  },
  fixed64: function fixed64(args) {
    return toJSON["long"](args);
  },
  sfixed64: function sfixed64(args) {
    return toJSON["long"](args);
  },
  // message.signDoc !== undefined && (obj.signDoc = message.signDoc ? SignDocDirectAux.toJSON(message.signDoc) : undefined);
  type: function type(args) {
    var prop = args.field.name;
    var name = args.context.getTypeName(args.field); // TODO isn't the nested conditional a waste? (using ts-proto as reference)
    // maybe null is OK?

    return notUndefinedSetValue(prop, t.conditionalExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.callExpression(t.memberExpression(t.identifier(name), t.identifier('toJSON')), [t.memberExpression(t.identifier('message'), t.identifier(prop))]), t.identifier('undefined')));
  },
  // message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));
  "enum": function _enum(args) {
    var prop = args.field.name;
    var enumFuncName = args.context.getToEnum(args.field);
    return notUndefinedSetValue(prop, t.callExpression(t.identifier(enumFuncName), [t.memberExpression(t.identifier('message'), t.identifier(prop))]));
  },
  // TODO again, another ts-proto reference that does not necessarily make sense
  // message.queryData !== undefined && (obj.queryData = base64FromBytes(message.queryData !== undefined ? message.queryData : new Uint8Array()));
  // message.queryData !== undefined && (obj.queryData = base64FromBytes(message.queryData !== undefined ? message.queryData : undefined));
  bytes: function bytes(args) {
    args.context.addUtil('base64FromBytes');
    var expr;

    if (args.isOptional) {
      // message.bytesValue !== undefined && (obj.bytesValue = message.bytesValue !== undefined ? base64FromBytes(message.bytesValue) : undefined);
      expr = t.conditionalExpression(t.binaryExpression('!==', t.memberExpression(t.identifier('message'), t.identifier(args.field.name)), t.identifier('undefined')), t.callExpression(t.identifier('base64FromBytes'), [t.memberExpression(t.identifier('message'), t.identifier(args.field.name))]), t.identifier('undefined'));
    } else {
      // message.queryData !== undefined && (obj.queryData = base64FromBytes(message.queryData !== undefined ? message.queryData : new Uint8Array()));
      expr = t.callExpression(t.identifier('base64FromBytes'), [t.conditionalExpression(t.binaryExpression('!==', t.memberExpression(t.identifier('message'), t.identifier(args.field.name)), t.identifier('undefined')), t.memberExpression(t.identifier('message'), t.identifier(args.field.name)), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, args.field, args.isOptional))]);
    }

    return notUndefinedSetValue(args.field.name, expr);
  },
  // message.period !== undefined && (obj.period = message.period);
  duration: function duration(args) {
    return toJSON.identity(args);
  },
  timestamp: function timestamp(args) {
    var timestampFormat = args.context.pluginValue('typingsFormat.timestamp');

    switch (timestampFormat) {
      case 'timestamp':
        return toJSON.timestampTimestamp(args);

      case 'date':
      default:
        return toJSON.timestampDate(args);
    }
  },
  // message.periodReset !== undefined && (obj.periodReset = fromTimestamp(message.periodReset).toISOString());
  timestampTimestamp: function timestampTimestamp(args) {
    args.context.addUtil('fromTimestamp');
    return notUndefinedSetValue(args.field.name, t.callExpression(t.memberExpression(t.callExpression(t.identifier('fromTimestamp'), [t.memberExpression(t.identifier('message'), t.identifier(args.field.name))]), t.identifier('toISOString')), []));
  },
  // message.periodReset !== undefined && (obj.periodReset = message.periodReset.toISOString());
  timestampDate: function timestampDate(args) {
    return notUndefinedSetValue(args.field.name, t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(args.field.name)), t.identifier('toISOString')), []));
  },
  // obj.labels = {};
  //   if (message.labels) {
  //     Object.entries(message.labels).forEach(([k, v]) => {
  //       obj.labels[k] = v;
  //     });
  //   }
  // obj.typeMap = {};
  // if (message.typeMap) {
  //   Object.entries(message.typeMap).forEach(([k, v]) => {
  //     obj.typeMap[k] = Type.toJSON(v);
  //   });
  // }
  keyHash: function keyHash(args) {
    var prop = args.field.name;
    var keyType = args.field.keyType;
    var valueType = args.field.parsedType.name;
    var toJSON = null;

    switch (valueType) {
      case 'string':
        toJSON = t.identifier('v');
        break;

      case 'uint32':
      case 'int32':
        toJSON = t.callExpression(t.memberExpression(t.identifier('Math'), t.identifier('round')), [t.identifier('v')]);
        break;

      case 'int64':
      case 'uint64':
        toJSON = t.callExpression(t.memberExpression(t.identifier('v'), t.identifier('toString')), []);
        break;

      default:
        toJSON = t.callExpression(t.memberExpression(t.identifier(valueType), t.identifier('toJSON')), [t.identifier('v')]);
    }

    return [t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('obj'), t.identifier(prop)), t.objectExpression([]))), //
    t.ifStatement(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.blockStatement([t.expressionStatement(t.callExpression(t.memberExpression(t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('entries')), [t.memberExpression(t.identifier('message'), t.identifier(prop))]), t.identifier('forEach')), [t.arrowFunctionExpression([t.arrayPattern([t.identifier('k'), t.identifier('v')])], t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.memberExpression(t.identifier('obj'), t.identifier(prop)), t.identifier('k'), true), toJSON))]))]))]))];
  },
  // if (message.codeIds) {
  //     obj.codeIds = message.codeIds.map(e => (e || Long.UZERO).toString());
  // } else {
  //     obj.codeIds = [];
  // }
  array: function array(args, expr) {
    var prop = args.field.name;
    return t.ifStatement(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('obj'), t.identifier(prop)), t.callExpression(t.memberExpression(t.memberExpression(t.identifier('message'), t.identifier(prop)), t.identifier('map')), [t.arrowFunctionExpression([t.identifier('e')], expr)])))]), t.blockStatement([t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.identifier('obj'), t.identifier(prop)), t.arrayExpression([])))]));
  }
};
exports.toJSON = toJSON;
var arrayTypes = {
  identity: function identity() {
    return t.identifier('e');
  },
  // if (message.overloadId) {
  //     obj.overloadId = message.overloadId.map(e => e);
  // } else {
  //     obj.overloadId = [];
  // }
  string: function string() {
    return arrayTypes.identity();
  },
  "double": function double() {
    return arrayTypes.identity();
  },
  "float": function float() {
    return arrayTypes.identity();
  },
  bool: function bool() {
    return arrayTypes.identity();
  },
  //   if (message.lineOffsets) {
  //     obj.lineOffsets = message.lineOffsets.map(e => Math.round(e));
  //   } else {
  //     obj.lineOffsets = [];
  //   }
  number: function number() {
    return t.callExpression(t.memberExpression(t.identifier('Math'), t.identifier('round')), [t.identifier('e')]);
  },
  int32: function int32() {
    return arrayTypes.number();
  },
  uint32: function uint32() {
    return arrayTypes.number();
  },
  sint32: function sint32() {
    return arrayTypes.number();
  },
  fixed32: function fixed32() {
    return arrayTypes.number();
  },
  sfixed32: function sfixed32() {
    return arrayTypes.number();
  },
  // if (message.codeIds) {
  //     obj.codeIds = message.codeIds.map(e => (e || Long.UZERO).toString());
  // } else {
  //     obj.codeIds = [];
  // }
  "long": function long(args) {
    return t.callExpression(t.memberExpression(t.logicalExpression('||', t.identifier('e'), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, _objectSpread(_objectSpread({}, args.field), {}, {
      rule: undefined // so it's treated as type not an array...

    }), args.isOptional)), t.identifier('toString')), []);
  },
  int64: function int64(args) {
    return arrayTypes["long"](args);
  },
  uint64: function uint64(args) {
    return arrayTypes["long"](args);
  },
  sint64: function sint64(args) {
    return arrayTypes["long"](args);
  },
  fixed64: function fixed64(args) {
    return arrayTypes["long"](args);
  },
  sfixed64: function sfixed64(args) {
    return arrayTypes["long"](args);
  },
  //   if (message.myBytesArray) {
  //     obj.myBytesArray = message.myBytesArray.map(e => base64FromBytes(e !== undefined ? e : new Uint8Array()));
  //   } else {
  //     obj.myBytesArray = [];
  //   }
  bytes: function bytes(args) {
    args.context.addUtil('base64FromBytes');
    return t.callExpression(t.identifier('base64FromBytes'), [t.conditionalExpression(t.binaryExpression('!==', t.identifier('e'), t.identifier('undefined')), t.identifier('e'), (0, _types2.getDefaultTSTypeFromProtoType)(args.context, _objectSpread(_objectSpread({}, args.field), {}, {
      rule: undefined // so it's treated as type not an array...

    }), args.isOptional))]);
  },
  "enum": function _enum(args) {
    var enumFuncName = args.context.getToEnum(args.field);
    return t.callExpression(t.identifier(enumFuncName), [t.identifier('e')]);
  },
  // if (message.tokenInMaxs) {
  //     obj.tokenInMaxs = message.tokenInMaxs.map(e => e ? Coin.toJSON(e) : undefined);
  // } else {
  //     obj.tokenInMaxs = [];
  // }
  type: function type(args) {
    var name = args.context.getTypeName(args.field);
    return t.conditionalExpression(t.identifier('e'), t.callExpression(t.memberExpression(t.identifier(name), t.identifier('toJSON')), [t.identifier('e')]), t.identifier('undefined'));
  }
};
exports.arrayTypes = arrayTypes;