"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProtoType = exports.createCreateProtoType = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../../utils");

var _types2 = require("./types");

var _types3 = require("../types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getProtoFieldTypeName = function getProtoFieldTypeName(context, field) {
  var name = context.getTypeName(field);
  return (0, _utils.renderNameSafely)(name);
};

var getProtoField = function getProtoField(context, field) {
  var _field$options;

  var ast = null;
  var optional = false;

  if ((_field$options = field.options) !== null && _field$options !== void 0 && _field$options['(gogoproto.nullable)']) {
    optional = true;
  }

  if (_types2.NATIVE_TYPES.includes(field.type)) {
    ast = (0, _types3.getTSTypeForProto)(context, field);
  } else {
    ast = t.tsTypeReference(t.identifier(getProtoFieldTypeName(context, field)));
  }

  if (field.rule === 'repeated') {
    ast = t.tsArrayType(ast);
  }

  if (field.keyType) {
    ast = t.tsUnionType([t.tsTypeLiteral([t.tsIndexSignature([(0, _utils.identifier)('key', t.tsTypeAnnotation((0, _types3.getTSType)(context, field.keyType)))], t.tsTypeAnnotation(ast))])]);
  }

  return ast;
};

var createProtoType = function createProtoType(context, name, proto) {
  var _proto$options;

  var oneOfs = (0, _types2.getOneOfs)(proto);
  var declaration = t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(name), null, [], t.tsInterfaceBody(Object.keys(proto.fields).reduce(function (m, fieldName) {
    var _field$options2;

    var isOneOf = oneOfs.includes(fieldName);
    var field = proto.fields[fieldName];
    var propSig = (0, _utils.tsPropertySignature)(t.identifier(fieldName), t.tsTypeAnnotation(getProtoField(context, field)), (0, _types2.getFieldOptionality)(field, isOneOf));
    var comments = [];

    if (field.comment) {
      comments.push((0, _utils.makeCommentBlock)(field.comment));
    }

    if ((_field$options2 = field.options) !== null && _field$options2 !== void 0 && _field$options2.deprecated) {
      comments.push((0, _utils.makeCommentBlock)('@deprecated'));
    }

    if (comments.length) {
      propSig.leadingComments = comments;
    }

    m.push(propSig);
    return m;
  }, []))));
  var comments = [];

  if (proto.comment) {
    comments.push((0, _utils.makeCommentBlock)(proto.comment));
  }

  if ((_proto$options = proto.options) !== null && _proto$options !== void 0 && _proto$options.deprecated) {
    comments.push((0, _utils.makeCommentBlock)('@deprecated'));
  }

  if (comments.length) {
    declaration.leadingComments = comments;
  }

  return declaration;
};

exports.createProtoType = createProtoType;

var createCreateProtoType = function createCreateProtoType(context, name, proto) {
  var oneOfs = (0, _types2.getOneOfs)(proto);
  var fields = Object.keys(proto.fields).map(function (key) {
    var isOneOf = oneOfs.includes(key);
    var isOptional = (0, _types2.getFieldOptionality)(proto.fields[key], isOneOf);
    return _objectSpread(_objectSpread({
      name: key
    }, proto.fields[key]), {}, {
      isOptional: isOptional
    });
  }).map(function (field) {
    return t.objectProperty(t.identifier(field.name), (0, _types3.getDefaultTSTypeFromProtoType)(context, field, field.isOptional));
  });
  return (0, _utils.functionDeclaration)(t.identifier((0, _types2.getBaseCreateTypeFuncName)(name)), [], t.blockStatement([t.returnStatement(t.objectExpression((0, _toConsumableArray2["default"])(fields)))]), false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))));
};

exports.createCreateProtoType = createCreateProtoType;