"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTSTypeForProto = exports.getTSTypeForAmino = exports.getTSType = exports.getDefaultTSTypeFromProtoType = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getTSType = function getTSType(context, type) {
  switch (type) {
    case 'string':
      return t.tsStringKeyword();

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.tsNumberKeyword();

    case 'int64':
    case 'uint64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.tsTypeReference(t.identifier('Long'));

    case 'bytes':
      return t.tsTypeReference(t.identifier('Uint8Array'));

    case 'bool':
      return t.tsBooleanKeyword();

    case 'google.protobuf.Timestamp':
      switch (context.pluginValue('typingsFormat.timestamp')) {
        case 'timestamp':
          return t.tsTypeReference(t.identifier('Timestamp'));

        case 'date':
        default:
          return t.tsTypeReference(t.identifier('Date'));
      }

    case 'google.protobuf.Duration':
      switch (context.pluginValue('typingsFormat.duration')) {
        case 'duration':
          return t.tsTypeReference(t.identifier('Duration'));

        case 'string':
        default:
          return t.tsStringKeyword();
      }

    case 'google.protobuf.Any':
      return t.tsTypeReference(t.identifier('Any'));

    default:
      throw new Error('getTSType() type not found');
  }

  ;
};

exports.getTSType = getTSType;

var getTSTypeForAmino = function getTSTypeForAmino(context, field) {
  var _field$options;

  switch (field.type) {
    case 'bytes':
      // bytes [WASMByteCode]
      if (((_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options['(gogoproto.customname)']) === 'WASMByteCode') {
        return t.tsStringKeyword();
      }

      return t.tsTypeReference(t.identifier('Uint8Array'));

    default:
      return getTSType(context, field.type);
  }

  ;
};

exports.getTSTypeForAmino = getTSTypeForAmino;

var getTSTypeForProto = function getTSTypeForProto(context, field) {
  return getTSType(context, field.type);
};

exports.getTSTypeForProto = getTSTypeForProto;

var getDefaultTSTypeFromProtoType = function getDefaultTSTypeFromProtoType(context, field, isOptional) {
  var _field$parsedType;

  if (isOptional) {
    return t.identifier('undefined');
  }

  if (field.rule === 'repeated') {
    return t.arrayExpression([]);
  }

  if (field.keyType) {
    return t.objectExpression([]);
  }

  if (((_field$parsedType = field.parsedType) === null || _field$parsedType === void 0 ? void 0 : _field$parsedType.type) === 'Enum') {
    return t.numericLiteral(0);
  }

  switch (field.type) {
    case 'string':
      return t.stringLiteral('');

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.numericLiteral(0);

    case 'uint64':
      return t.memberExpression(t.identifier('Long'), t.identifier('UZERO'));

    case 'int64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.memberExpression(t.identifier('Long'), t.identifier('ZERO'));

    case 'bytes':
      return t.newExpression(t.identifier('Uint8Array'), []);

    case 'bool':
      return t.booleanLiteral(false);
    // OTHER TYPES

    case 'google.protobuf.Timestamp':
      return t.identifier('undefined');

    case 'google.protobuf.Duration':
      return t.identifier('undefined');

    case 'google.protobuf.Any':
      return t.identifier('undefined');

    case 'cosmos.base.v1beta1.Coins':
      return t.arrayExpression([]);

    case 'cosmos.base.v1beta1.Coin':
      return t.identifier('undefined');

    default:
      // console.warn('getDefaultTSTypeFromProtoType() type not found: ' + type);
      return t.identifier('undefined');
  }

  ;
};

exports.getDefaultTSTypeFromProtoType = getDefaultTSTypeFromProtoType;