"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpcRecursiveObjectProps = exports.rpcNewAwaitImport = exports.rpcNestedImportObject = exports.rpcFuncArguments = exports.rpcClassArguments = exports.createScopedRpcFactory = void 0;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../../../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var rpcFuncArguments = function rpcFuncArguments() {
  return [(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpc'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Rpc'))))])))];
};

exports.rpcFuncArguments = rpcFuncArguments;

var rpcClassArguments = function rpcClassArguments() {
  return [t.objectExpression([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)])];
};

exports.rpcClassArguments = rpcClassArguments;

var rpcNewAwaitImport = function rpcNewAwaitImport(path, className) {
  return t.newExpression(t.memberExpression(t.awaitExpression(t.callExpression(t["import"](), [t.stringLiteral(path)])), t.identifier(className), false), [t.identifier('rpc')]);
};

exports.rpcNewAwaitImport = rpcNewAwaitImport;

var rpcRecursiveObjectProps = function rpcRecursiveObjectProps(names, leaf) {
  var _names = (0, _toArray2["default"])(names),
      name = _names[0],
      rest = _names.slice(1);

  var baseComponent;

  if (names.length === 1) {
    baseComponent = leaf ? leaf : t.identifier(name);
  } else {
    baseComponent = rpcRecursiveObjectProps(rest, leaf);
  }

  return t.objectExpression([t.objectProperty(t.identifier(name), baseComponent)]);
};

exports.rpcRecursiveObjectProps = rpcRecursiveObjectProps;

var rpcNestedImportObject = function rpcNestedImportObject(obj, className) {
  if (typeof obj === 'string') {
    return rpcNewAwaitImport(obj, className);
  }

  var keys = Object.keys(obj);
  return t.objectExpression(keys.map(function (name) {
    return t.objectProperty(t.identifier(name), rpcNestedImportObject(obj[name], className));
  }));
};

exports.rpcNestedImportObject = rpcNestedImportObject;

var createScopedRpcFactory = function createScopedRpcFactory(obj, identifier, className) {
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(identifier), t.arrowFunctionExpression(rpcFuncArguments(), //
  rpcNestedImportObject(obj, className), true))]));
};

exports.createScopedRpcFactory = createScopedRpcFactory;