"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStargateClient = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var createStargateClient = function createStargateClient(_ref) {
  var name = _ref.name,
      registries = _ref.registries,
      aminos = _ref.aminos,
      context = _ref.context;
  var includeDefaults = context.pluginValue('stargateClients.includeCosmosDefaultTypes');

  if (includeDefaults) {
    context.addUtil('defaultRegistryTypes');
  }

  context.addUtil('GeneratedType');
  context.addUtil('OfflineSigner');
  context.addUtil('Registry');
  context.addUtil('AminoTypes');
  context.addUtil('SigningStargateClient');
  context.addUtil('ReadonlyArray');
  var prop = t.tsPropertySignature(t.identifier('defaultTypes'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('ReadonlyArray'), t.tsTypeParameterInstantiation([t.tsTupleType([t.tsStringKeyword(), t.tsTypeReference(t.identifier('GeneratedType'))])]))));
  prop.optional = true;
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), t.arrowFunctionExpression([(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpcEndpoint'), t.identifier('rpcEndpoint'), false, true), t.objectProperty(t.identifier('signer'), t.identifier('signer'), false, true), includeDefaults && t.objectProperty(t.identifier('defaultTypes'), t.assignmentPattern(t.identifier('defaultTypes'), t.identifier('defaultRegistryTypes')), false, true)].filter(Boolean), t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpcEndpoint'), t.tsTypeAnnotation(t.tsStringKeyword())), t.tsPropertySignature(t.identifier('signer'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('OfflineSigner')))), includeDefaults && prop].filter(Boolean))))], t.blockStatement([t.variableDeclaration('const', [t.variableDeclarator(t.identifier('registry'), t.newExpression(t.identifier('Registry'), [t.arrayExpression([includeDefaults && t.spreadElement(t.identifier('defaultTypes'))].concat((0, _toConsumableArray2["default"])(registries.map(function (pkg) {
    return t.spreadElement((0, _utils.memberExpressionOrIdentifier)("".concat(pkg, ".registry").split('.').reverse()));
  }))).filter(Boolean))]))]), // amino
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('aminoTypes'), t.newExpression(t.identifier('AminoTypes'), [t.objectExpression((0, _toConsumableArray2["default"])(aminos.map(function (pkg) {
    return t.spreadElement((0, _utils.memberExpressionOrIdentifier)("".concat(pkg, ".AminoConverter").split('.').reverse()));
  })))]))]), // client
  t.variableDeclaration('const', [t.variableDeclarator(t.identifier('client'), t.awaitExpression(t.callExpression(t.memberExpression(t.identifier('SigningStargateClient'), t.identifier('connectWithSigner')), [t.identifier('rpcEndpoint'), t.identifier('signer'), t.objectExpression([t.objectProperty(t.identifier('registry'), t.identifier('registry'), false, true), t.objectProperty(t.identifier('aminoTypes'), t.identifier('aminoTypes'), false, true)])])))]), // return 
  t.returnStatement(t.identifier('client'))]), true))]));
};

exports.createStargateClient = createStargateClient;