"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _testUtils = require("../../../test-utils");

var _stargate = require("./stargate");

it('createStargateClient', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'osmosis.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          (0, _testUtils.expectCode)((0, _stargate.createStargateClient)({
            context: context,
            name: 'getSigningOsmosisClient',
            registries: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup'],
            aminos: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup']
          }));
          expect(context.utils).toMatchSnapshot();

        case 4:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
it('createStargateClient w/o defaults', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
  var ref, context;
  return _regenerator["default"].wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ref = {
            absolute: '/',
            filename: '/',
            proto: {
              imports: [],
              "package": 'cosmos.gamm.yolo',
              root: {}
            }
          };
          context = (0, _testUtils.getGenericParseContextWithRef)(ref);
          (0, _testUtils.expectCode)((0, _stargate.createStargateClient)({
            context: context,
            name: 'getSigningOsmosisClient',
            registries: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup'],
            aminos: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup']
          }));
          expect(context.utils).toMatchSnapshot();

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));