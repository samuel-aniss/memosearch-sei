import * as t from '@babel/types';
import { toAminoJsonMethod } from '../to-amino-json';
import { fromAminoJsonMethod } from '../from-amino-json';
import { getTypeUrl, typeUrlToAmino } from '../utils';
export const createAminoConverterItem = ({
  root,
  context,
  proto
}) => {
  const typeUrl = getTypeUrl(root, proto);
  return t.objectProperty(t.stringLiteral(typeUrl), t.objectExpression([t.objectProperty(t.identifier('aminoType'), t.stringLiteral(typeUrlToAmino(context, typeUrl))), t.objectProperty(t.identifier('toAmino'), toAminoJsonMethod({
    context,
    proto
  })), t.objectProperty(t.identifier('fromAmino'), fromAminoJsonMethod({
    context,
    proto
  }))]));
};
export const createAminoConverter = ({
  name,
  root,
  context,
  protos
}) => {
  const items = protos.map(proto => {
    return createAminoConverterItem({
      context,
      root,
      proto
    });
  });
  return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(name), t.objectExpression(items))]));
};